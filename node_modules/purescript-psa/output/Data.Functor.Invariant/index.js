// Generated by psc version 0.10.7
"use strict";
var Data_Functor = require("../Data.Functor");

// | A type of functor that can be used to adapt the type of a wrapped function

// | where the parameterised type occurs in both the positive and negative

// | position, for example, `F (a -> a)`.

// |

// | An `Invariant` instance should satisfy the following laws:

// |

// | - Identity: `imap id id = id`

// | - Composition: `imap g1 g2 <<< imap f1 f2 = imap (g1 <<< f1) (f2 <<< g2)`

// |
var Invariant = function (imap) {
    this.imap = imap;
};

// | As all `Functor`s are also trivially `Invariant`, this function can be

// | used as the `imap` implementation for any types that has an existing

// | `Functor` instance.
var imapF = function (dictFunctor) {
    return function (f) {
        return function (v) {
            return Data_Functor.map(dictFunctor)(f);
        };
    };
};
var invariantArray = new Invariant(imapF(Data_Functor.functorArray));
var invariantFn = new Invariant(imapF(Data_Functor.functorFn));

// | A type of functor that can be used to adapt the type of a wrapped function

// | where the parameterised type occurs in both the positive and negative

// | position, for example, `F (a -> a)`.

// |

// | An `Invariant` instance should satisfy the following laws:

// |

// | - Identity: `imap id id = id`

// | - Composition: `imap g1 g2 <<< imap f1 f2 = imap (g1 <<< f1) (f2 <<< g2)`

// |
var imap = function (dict) {
    return dict.imap;
};
module.exports = {
    Invariant: Invariant, 
    imap: imap, 
    imapF: imapF, 
    invariantFn: invariantFn, 
    invariantArray: invariantArray
};
