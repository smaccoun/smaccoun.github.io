// Generated by psc version 0.10.7
"use strict";
var $foreign = require("./foreign");
var Data_Unit = require("../Data.Unit");

// | The `HeytingAlgebra` type class represents types are bounded lattices with

// | an implication operator such that the following laws hold:

// |

// | - Associativity:

// |   - `a || (b || c) = (a || b) || c`

// |   - `a && (b && c) = (a && b) && c`

// | - Commutativity:

// |   - `a || b = b || a`

// |   - `a && b = b && a`

// | - Absorption:

// |   - `a || (a && b) = a`

// |   - `a && (a || b) = a`

// | - Idempotent:

// |   - `a || a = a`

// |   - `a && a = a`

// | - Identity:

// |   - `a || ff = a`

// |   - `a && tt = a`

// | - Implication:

// |   - ``a `implies` a = tt``

// |   - ``a && (a `implies` b) = a && b``

// |   - ``b && (a `implies` b) = b``

// |   - ``a `implies` (b && c) = (a `implies` b) && (a `implies` c)``

// | - Complemented:

// |   - ``not a = a `implies` ff``
var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
    this.conj = conj;
    this.disj = disj;
    this.ff = ff;
    this.implies = implies;
    this.not = not;
    this.tt = tt;
};

// | The `HeytingAlgebra` type class represents types are bounded lattices with

// | an implication operator such that the following laws hold:

// |

// | - Associativity:

// |   - `a || (b || c) = (a || b) || c`

// |   - `a && (b && c) = (a && b) && c`

// | - Commutativity:

// |   - `a || b = b || a`

// |   - `a && b = b && a`

// | - Absorption:

// |   - `a || (a && b) = a`

// |   - `a && (a || b) = a`

// | - Idempotent:

// |   - `a || a = a`

// |   - `a && a = a`

// | - Identity:

// |   - `a || ff = a`

// |   - `a && tt = a`

// | - Implication:

// |   - ``a `implies` a = tt``

// |   - ``a && (a `implies` b) = a && b``

// |   - ``b && (a `implies` b) = b``

// |   - ``a `implies` (b && c) = (a `implies` b) && (a `implies` c)``

// | - Complemented:

// |   - ``not a = a `implies` ff``
var tt = function (dict) {
    return dict.tt;
};

// | The `HeytingAlgebra` type class represents types are bounded lattices with

// | an implication operator such that the following laws hold:

// |

// | - Associativity:

// |   - `a || (b || c) = (a || b) || c`

// |   - `a && (b && c) = (a && b) && c`

// | - Commutativity:

// |   - `a || b = b || a`

// |   - `a && b = b && a`

// | - Absorption:

// |   - `a || (a && b) = a`

// |   - `a && (a || b) = a`

// | - Idempotent:

// |   - `a || a = a`

// |   - `a && a = a`

// | - Identity:

// |   - `a || ff = a`

// |   - `a && tt = a`

// | - Implication:

// |   - ``a `implies` a = tt``

// |   - ``a && (a `implies` b) = a && b``

// |   - ``b && (a `implies` b) = b``

// |   - ``a `implies` (b && c) = (a `implies` b) && (a `implies` c)``

// | - Complemented:

// |   - ``not a = a `implies` ff``
var not = function (dict) {
    return dict.not;
};

// | The `HeytingAlgebra` type class represents types are bounded lattices with

// | an implication operator such that the following laws hold:

// |

// | - Associativity:

// |   - `a || (b || c) = (a || b) || c`

// |   - `a && (b && c) = (a && b) && c`

// | - Commutativity:

// |   - `a || b = b || a`

// |   - `a && b = b && a`

// | - Absorption:

// |   - `a || (a && b) = a`

// |   - `a && (a || b) = a`

// | - Idempotent:

// |   - `a || a = a`

// |   - `a && a = a`

// | - Identity:

// |   - `a || ff = a`

// |   - `a && tt = a`

// | - Implication:

// |   - ``a `implies` a = tt``

// |   - ``a && (a `implies` b) = a && b``

// |   - ``b && (a `implies` b) = b``

// |   - ``a `implies` (b && c) = (a `implies` b) && (a `implies` c)``

// | - Complemented:

// |   - ``not a = a `implies` ff``
var implies = function (dict) {
    return dict.implies;
};
var heytingAlgebraUnit = new HeytingAlgebra(function (v) {
    return function (v1) {
        return Data_Unit.unit;
    };
}, function (v) {
    return function (v1) {
        return Data_Unit.unit;
    };
}, Data_Unit.unit, function (v) {
    return function (v1) {
        return Data_Unit.unit;
    };
}, function (v) {
    return Data_Unit.unit;
}, Data_Unit.unit);

// | The `HeytingAlgebra` type class represents types are bounded lattices with

// | an implication operator such that the following laws hold:

// |

// | - Associativity:

// |   - `a || (b || c) = (a || b) || c`

// |   - `a && (b && c) = (a && b) && c`

// | - Commutativity:

// |   - `a || b = b || a`

// |   - `a && b = b && a`

// | - Absorption:

// |   - `a || (a && b) = a`

// |   - `a && (a || b) = a`

// | - Idempotent:

// |   - `a || a = a`

// |   - `a && a = a`

// | - Identity:

// |   - `a || ff = a`

// |   - `a && tt = a`

// | - Implication:

// |   - ``a `implies` a = tt``

// |   - ``a && (a `implies` b) = a && b``

// |   - ``b && (a `implies` b) = b``

// |   - ``a `implies` (b && c) = (a `implies` b) && (a `implies` c)``

// | - Complemented:

// |   - ``not a = a `implies` ff``
var ff = function (dict) {
    return dict.ff;
};

// | The `HeytingAlgebra` type class represents types are bounded lattices with

// | an implication operator such that the following laws hold:

// |

// | - Associativity:

// |   - `a || (b || c) = (a || b) || c`

// |   - `a && (b && c) = (a && b) && c`

// | - Commutativity:

// |   - `a || b = b || a`

// |   - `a && b = b && a`

// | - Absorption:

// |   - `a || (a && b) = a`

// |   - `a && (a || b) = a`

// | - Idempotent:

// |   - `a || a = a`

// |   - `a && a = a`

// | - Identity:

// |   - `a || ff = a`

// |   - `a && tt = a`

// | - Implication:

// |   - ``a `implies` a = tt``

// |   - ``a && (a `implies` b) = a && b``

// |   - ``b && (a `implies` b) = b``

// |   - ``a `implies` (b && c) = (a `implies` b) && (a `implies` c)``

// | - Complemented:

// |   - ``not a = a `implies` ff``
var disj = function (dict) {
    return dict.disj;
};
var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
    return function (b) {
        return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
    };
}, $foreign.boolNot, true);

// | The `HeytingAlgebra` type class represents types are bounded lattices with

// | an implication operator such that the following laws hold:

// |

// | - Associativity:

// |   - `a || (b || c) = (a || b) || c`

// |   - `a && (b && c) = (a && b) && c`

// | - Commutativity:

// |   - `a || b = b || a`

// |   - `a && b = b && a`

// | - Absorption:

// |   - `a || (a && b) = a`

// |   - `a && (a || b) = a`

// | - Idempotent:

// |   - `a || a = a`

// |   - `a && a = a`

// | - Identity:

// |   - `a || ff = a`

// |   - `a && tt = a`

// | - Implication:

// |   - ``a `implies` a = tt``

// |   - ``a && (a `implies` b) = a && b``

// |   - ``b && (a `implies` b) = b``

// |   - ``a `implies` (b && c) = (a `implies` b) && (a `implies` c)``

// | - Complemented:

// |   - ``not a = a `implies` ff``
var conj = function (dict) {
    return dict.conj;
};
var heytingAlgebraFunction = function (dictHeytingAlgebra) {
    return new HeytingAlgebra(function (f) {
        return function (g) {
            return function (a) {
                return conj(dictHeytingAlgebra)(f(a))(g(a));
            };
        };
    }, function (f) {
        return function (g) {
            return function (a) {
                return disj(dictHeytingAlgebra)(f(a))(g(a));
            };
        };
    }, function (v) {
        return ff(dictHeytingAlgebra);
    }, function (f) {
        return function (g) {
            return function (a) {
                return implies(dictHeytingAlgebra)(f(a))(g(a));
            };
        };
    }, function (f) {
        return function (a) {
            return not(dictHeytingAlgebra)(f(a));
        };
    }, function (v) {
        return tt(dictHeytingAlgebra);
    });
};
module.exports = {
    HeytingAlgebra: HeytingAlgebra, 
    conj: conj, 
    disj: disj, 
    ff: ff, 
    implies: implies, 
    not: not, 
    tt: tt, 
    heytingAlgebraBoolean: heytingAlgebraBoolean, 
    heytingAlgebraUnit: heytingAlgebraUnit, 
    heytingAlgebraFunction: heytingAlgebraFunction
};
