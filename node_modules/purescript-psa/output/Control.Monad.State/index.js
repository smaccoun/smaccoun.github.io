// Generated by psc version 0.10.7

// | This module defines the `State` monad.
"use strict";
var Prelude = require("../Prelude");
var Control_Monad_State_Class = require("../Control.Monad.State.Class");
var Control_Monad_State_Trans = require("../Control.Monad.State.Trans");
var Data_Identity = require("../Data.Identity");
var Data_Newtype = require("../Data.Newtype");
var Data_Tuple = require("../Data.Tuple");
var Control_Semigroupoid = require("../Control.Semigroupoid");

// | Modify the state in a `State` action
var withState = Control_Monad_State_Trans.withStateT;

// | Run a computation in the `State` monad
var runState = function (v) {
    return function ($14) {
        return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(v($14));
    };
};

// | Change the type of the result in a `State` action
var mapState = function (f) {
    return Control_Monad_State_Trans.mapStateT(function ($15) {
        return Data_Identity.Identity(f(Data_Newtype.unwrap(Data_Identity.newtypeIdentity)($15)));
    });
};

// | Run a computation in the `State` monad, discarding the result
var execState = function (v) {
    return function (s) {
        var $6 = v(s);
        return $6.value1;
    };
};

// | Run a computation in the `State` monad, discarding the final state
var evalState = function (v) {
    return function (s) {
        var $11 = v(s);
        return $11.value0;
    };
};
module.exports = {
    evalState: evalState, 
    execState: execState, 
    mapState: mapState, 
    runState: runState, 
    withState: withState
};
