// Generated by psc version 0.10.7
"use strict";
var $foreign = require("./foreign");
var Prelude = require("../Prelude");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Data_DateTime = require("../Data.DateTime");
var Data_DateTime_Instant = require("../Data.DateTime.Instant");
var Data_DateTime_Locale = require("../Data.DateTime.Locale");
var Data_Maybe = require("../Data.Maybe");
var Data_Time_Duration = require("../Data.Time.Duration");
var Data_Functor = require("../Data.Functor");
var Control_Apply = require("../Control.Apply");
var Control_Semigroupoid = require("../Control.Semigroupoid");

// | Gets the locale according to the current machine’s clock.

// |

// | **Note**: The `LocaleName` will always be empty for the `Locale` value

// | returned here until there is a reliable way to detect a name for the

// | locale.
var locale = Data_Functor.map(Control_Monad_Eff.functorEff)(Data_DateTime_Locale.Locale.create(Data_Maybe.Nothing.value))($foreign.nowOffset);

// | Gets the date according to the current machine’s clock.
var nowDate = Control_Apply.apply(Control_Monad_Eff.applyEff)(Data_Functor.map(Control_Monad_Eff.functorEff)(Data_DateTime_Locale.LocalValue.create)(locale))(Data_Functor.map(Control_Monad_Eff.functorEff)(function ($0) {
    return Data_DateTime.date(Data_DateTime_Instant.toDateTime($0));
})($foreign.now));

// | Gets a `DateTime` value for the date and time according to the current

// | machine’s clock.
var nowDateTime = Control_Apply.apply(Control_Monad_Eff.applyEff)(Data_Functor.map(Control_Monad_Eff.functorEff)(Data_DateTime_Locale.LocalValue.create)(locale))(Data_Functor.map(Control_Monad_Eff.functorEff)(Data_DateTime_Instant.toDateTime)($foreign.now));

// | Gets the time according to the current machine’s clock.
var nowTime = Control_Apply.apply(Control_Monad_Eff.applyEff)(Data_Functor.map(Control_Monad_Eff.functorEff)(Data_DateTime_Locale.LocalValue.create)(locale))(Data_Functor.map(Control_Monad_Eff.functorEff)(function ($1) {
    return Data_DateTime.time(Data_DateTime_Instant.toDateTime($1));
})($foreign.now));
module.exports = {
    locale: locale, 
    nowDate: nowDate, 
    nowDateTime: nowDateTime, 
    nowTime: nowTime, 
    now: $foreign.now
};
