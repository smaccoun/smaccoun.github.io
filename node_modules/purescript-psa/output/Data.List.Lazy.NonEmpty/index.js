// Generated by psc version 0.10.7
"use strict";
var Prelude = require("../Prelude");
var Data_Foldable = require("../Data.Foldable");
var Data_Lazy = require("../Data.Lazy");
var Data_List_Lazy = require("../Data.List.Lazy");
var Data_List_Lazy_Types = require("../Data.List.Lazy.Types");
var Data_Maybe = require("../Data.Maybe");
var Data_NonEmpty = require("../Data.NonEmpty");
var Data_Tuple = require("../Data.Tuple");
var Data_Unfoldable = require("../Data.Unfoldable");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Functor = require("../Data.Functor");
var Control_Applicative = require("../Control.Applicative");
var Data_Semiring = require("../Data.Semiring");
var Data_Function = require("../Data.Function");
var Control_Bind = require("../Control.Bind");
var uncons = function (v) {
    var $12 = Data_Lazy.force(v);
    return {
        head: $12.value0, 
        tail: $12.value1
    };
};
var toList = function (v) {
    var $16 = Data_Lazy.force(v);
    return Data_List_Lazy_Types.cons($16.value0)($16.value1);
};
var toUnfoldable = function (dictUnfoldable) {
    return function ($43) {
        return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
            return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
                return new Data_Tuple.Tuple(rec.head, rec.tail);
            })(Data_List_Lazy.uncons(xs));
        })(toList($43));
    };
};
var tail = function (v) {
    var $20 = Data_Lazy.force(v);
    return $20.value1;
};
var singleton = Control_Applicative.pure(Data_List_Lazy_Types.applicativeNonEmptyList);
var length = function (v) {
    var $24 = Data_Lazy.force(v);
    return 1 + Data_List_Lazy.length($24.value1) | 0;
};
var last = function (v) {
    var $28 = Data_Lazy.force(v);
    return Data_Maybe.fromMaybe($28.value0)(Data_List_Lazy.last($28.value1));
};
var init = function (v) {
    var $32 = Data_Lazy.force(v);
    return Data_Maybe.maybe(Data_List_Lazy_Types.nil)(function (v1) {
        return Data_List_Lazy_Types.cons($32.value0)(v1);
    })(Data_List_Lazy.init($32.value1));
};
var head = function (v) {
    var $36 = Data_Lazy.force(v);
    return $36.value0;
};
var fromList = function (l) {
    var $39 = Data_List_Lazy_Types.step(l);
    if ($39 instanceof Data_List_Lazy_Types.Nil) {
        return Data_Maybe.Nothing.value;
    };
    if ($39 instanceof Data_List_Lazy_Types.Cons) {
        return new Data_Maybe.Just(Data_Lazy.defer(function (v) {
            return new Data_NonEmpty.NonEmpty($39.value0, $39.value1);
        }));
    };
    throw new Error("Failed pattern match at Data.List.Lazy.NonEmpty line 37, column 3 - line 39, column 61: " + [ $39.constructor.name ]);
};
var fromFoldable = function (dictFoldable) {
    return function ($44) {
        return fromList(Data_List_Lazy.fromFoldable(dictFoldable)($44));
    };
};
var concatMap = Data_Function.flip(Control_Bind.bind(Data_List_Lazy_Types.bindNonEmptyList));
module.exports = {
    concatMap: concatMap, 
    fromFoldable: fromFoldable, 
    fromList: fromList, 
    head: head, 
    init: init, 
    length: length, 
    singleton: singleton, 
    tail: tail, 
    toList: toList, 
    toUnfoldable: toUnfoldable, 
    uncons: uncons
};
