// Generated by psc version 0.10.7
"use strict";
var $foreign = require("./foreign");
var Prelude = require("../Prelude");
var Data_Argonaut_Printer = require("../Data.Argonaut.Printer");
var Data_Argonaut_Parser = require("../Data.Argonaut.Parser");
var Data_Argonaut_Decode = require("../Data.Argonaut.Decode");
var Data_Argonaut_Encode = require("../Data.Argonaut.Encode");
var Data_Array = require("../Data.Array");
var Data_DateTime_Instant = require("../Data.DateTime.Instant");
var Data_Either = require("../Data.Either");
var Data_Foldable = require("../Data.Foldable");
var Data_Traversable = require("../Data.Traversable");
var Data_StrMap = require("../Data.StrMap");
var Data_StrMap_ST = require("../Data.StrMap.ST");
var Data_Maybe = require("../Data.Maybe");
var Data_Set = require("../Data.Set");
var Data_String = require("../Data.String");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Monad_Eff_Console = require("../Control.Monad.Eff.Console");
var Control_Monad_Eff_Exception = require("../Control.Monad.Eff.Exception");
var Control_Monad_Eff_Now = require("../Control.Monad.Eff.Now");
var Control_Monad_ST = require("../Control.Monad.ST");
var Node_Platform = require("../Node.Platform");
var Node_Process = require("../Node.Process");
var Node_ChildProcess = require("../Node.ChildProcess");
var Node_Stream = require("../Node.Stream");
var Node_Buffer = require("../Node.Buffer");
var Node_Encoding = require("../Node.Encoding");
var Node_FS = require("../Node.FS");
var Node_FS_Sync = require("../Node.FS.Sync");
var Node_FS_Stats = require("../Node.FS.Stats");
var Node_Path = require("../Node.Path");
var Unsafe_Coerce = require("../Unsafe.Coerce");
var Partial_Unsafe = require("../Partial.Unsafe");
var Psa = require("../Psa");
var Psa_Printer_Default = require("../Psa.Printer.Default");
var Psa_Printer_Json = require("../Psa.Printer.Json");
var Data_Eq = require("../Data.Eq");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Control_Apply = require("../Control.Apply");
var Control_Applicative = require("../Control.Applicative");
var Data_Ord = require("../Data.Ord");
var Data_Boolean = require("../Data.Boolean");
var Data_Functor = require("../Data.Functor");
var Control_Bind = require("../Control.Bind");
var Data_Function = require("../Data.Function");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Show = require("../Data.Show");
var Data_Posix_Signal = require("../Data.Posix.Signal");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_DateTime = require("../Data.DateTime");
var Data_Ring = require("../Data.Ring");
var Data_Argonaut_Encode_Class = require("../Data.Argonaut.Encode.Class");
var Psa_Types = require("../Psa.Types");
var Data_Argonaut_Decode_Class = require("../Data.Argonaut.Decode.Class");
var Psa_Output = require("../Psa.Output");
var usage = "psa - Error/Warning reporting frontend for 'purs compile'\x0a\x0aUsage: psa [--censor-lib] [--censor-src]\x0a           [--censor-codes=CODES] [--filter-codes=CODES]\x0a           [--no-colors] [--no-source]\x0a           [--is-lib=DIR] [--purs=PURS] [--stash]\x0a           PSC_OPTIONS\x0a\x0aAvailable options:\x0a  -v,--version           Show the version number\x0a  -h,--help              Show this help text\x0a  --verbose-stats        Show counts for each warning type\x0a  --censor-warnings      Censor all warnings\x0a  --censor-lib           Censor warnings from library sources\x0a  --censor-src           Censor warnings from project sources\x0a  --censor-codes=CODES   Censor specific error codes\x0a  --filter-codes=CODES   Only show specific error codes\x0a  --no-colors            Disable ANSI colors\x0a  --no-source            Disable original source code printing\x0a  --strict               Promotes src warnings to errors\x0a  --stash                Enable persistent warnings (defaults to .psa-stash)\x0a  --stash=FILE           Enable persistent warnings using a specific stash file\x0a  --is-lib=DIR           Distinguishing library path (defaults to 'bower_components')\x0a  --purs=PURS            Name of purs executable (defaults to 'purs')\x0a\x0a  CODES                  Comma-separated list of purs error codes\x0a  PSC_OPTIONS            Any extra options are passed to 'purs compile'\x0a";
var parseOptions = function (opts) {
    return function (args) {
        var isPrefix = function (s) {
            return function (str) {
                var $57 = Data_String.indexOf(s)(str);
                if ($57 instanceof Data_Maybe.Just && $57.value0 === 0) {
                    return true;
                };
                return false;
            };
        };
        var parse = function (p) {
            return function (arg) {
                if (arg === "--version" || arg === "-v") {
                    return Control_Apply.applySecond(Control_Monad_Eff.applyEff)(Control_Monad_Eff_Console.log($foreign.version))(Node_Process.exit(0));
                };
                if (arg === "--help" || arg === "-h") {
                    return Control_Apply.applySecond(Control_Monad_Eff.applyEff)(Control_Monad_Eff_Console.log(usage))(Node_Process.exit(0));
                };
                if (arg === "--stash") {
                    return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)((function () {
                        var $61 = {};
                        for (var $62 in p) {
                            if ({}.hasOwnProperty.call(p, $62)) {
                                $61[$62] = p[$62];
                            };
                        };
                        $61.stash = true;
                        return $61;
                    })());
                };
                if (arg === "--json-errors") {
                    return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)((function () {
                        var $64 = {};
                        for (var $65 in p) {
                            if ({}.hasOwnProperty.call(p, $65)) {
                                $64[$65] = p[$65];
                            };
                        };
                        $64.jsonErrors = true;
                        return $64;
                    })());
                };
                if (arg === "--no-source") {
                    return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)((function () {
                        var $67 = {};
                        for (var $68 in p) {
                            if ({}.hasOwnProperty.call(p, $68)) {
                                $67[$68] = p[$68];
                            };
                        };
                        $67.showSource = false;
                        return $67;
                    })());
                };
                if (arg === "--no-colors" || arg === "--monochrome") {
                    return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)((function () {
                        var $73 = {};
                        for (var $74 in p) {
                            if ({}.hasOwnProperty.call(p, $74)) {
                                $73[$74] = p[$74];
                            };
                        };
                        $73.opts = (function () {
                            var $70 = {};
                            for (var $71 in p.opts) {
                                if ({}.hasOwnProperty.call(p.opts, $71)) {
                                    $70[$71] = p["opts"][$71];
                                };
                            };
                            $70.ansi = false;
                            return $70;
                        })();
                        return $73;
                    })());
                };
                if (arg === "--verbose-stats") {
                    return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)((function () {
                        var $79 = {};
                        for (var $80 in p) {
                            if ({}.hasOwnProperty.call(p, $80)) {
                                $79[$80] = p[$80];
                            };
                        };
                        $79.opts = (function () {
                            var $76 = {};
                            for (var $77 in p.opts) {
                                if ({}.hasOwnProperty.call(p.opts, $77)) {
                                    $76[$77] = p["opts"][$77];
                                };
                            };
                            $76.verboseStats = true;
                            return $76;
                        })();
                        return $79;
                    })());
                };
                if (arg === "--strict") {
                    return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)((function () {
                        var $85 = {};
                        for (var $86 in p) {
                            if ({}.hasOwnProperty.call(p, $86)) {
                                $85[$86] = p[$86];
                            };
                        };
                        $85.opts = (function () {
                            var $82 = {};
                            for (var $83 in p.opts) {
                                if ({}.hasOwnProperty.call(p.opts, $83)) {
                                    $82[$83] = p["opts"][$83];
                                };
                            };
                            $82.strict = true;
                            return $82;
                        })();
                        return $85;
                    })());
                };
                if (arg === "--censor-warnings") {
                    return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)((function () {
                        var $91 = {};
                        for (var $92 in p) {
                            if ({}.hasOwnProperty.call(p, $92)) {
                                $91[$92] = p[$92];
                            };
                        };
                        $91.opts = (function () {
                            var $88 = {};
                            for (var $89 in p.opts) {
                                if ({}.hasOwnProperty.call(p.opts, $89)) {
                                    $88[$89] = p["opts"][$89];
                                };
                            };
                            $88.censorWarnings = true;
                            return $88;
                        })();
                        return $91;
                    })());
                };
                if (arg === "--censor-lib") {
                    return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)((function () {
                        var $97 = {};
                        for (var $98 in p) {
                            if ({}.hasOwnProperty.call(p, $98)) {
                                $97[$98] = p[$98];
                            };
                        };
                        $97.opts = (function () {
                            var $94 = {};
                            for (var $95 in p.opts) {
                                if ({}.hasOwnProperty.call(p.opts, $95)) {
                                    $94[$95] = p["opts"][$95];
                                };
                            };
                            $94.censorLib = true;
                            return $94;
                        })();
                        return $97;
                    })());
                };
                if (arg === "--censor-lib") {
                    return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)((function () {
                        var $103 = {};
                        for (var $104 in p) {
                            if ({}.hasOwnProperty.call(p, $104)) {
                                $103[$104] = p[$104];
                            };
                        };
                        $103.opts = (function () {
                            var $100 = {};
                            for (var $101 in p.opts) {
                                if ({}.hasOwnProperty.call(p.opts, $101)) {
                                    $100[$101] = p["opts"][$101];
                                };
                            };
                            $100.censorLib = true;
                            return $100;
                        })();
                        return $103;
                    })());
                };
                if (arg === "--censor-src") {
                    return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)((function () {
                        var $109 = {};
                        for (var $110 in p) {
                            if ({}.hasOwnProperty.call(p, $110)) {
                                $109[$110] = p[$110];
                            };
                        };
                        $109.opts = (function () {
                            var $106 = {};
                            for (var $107 in p.opts) {
                                if ({}.hasOwnProperty.call(p.opts, $107)) {
                                    $106[$107] = p["opts"][$107];
                                };
                            };
                            $106.censorSrc = true;
                            return $106;
                        })();
                        return $109;
                    })());
                };
                if (isPrefix("--censor-codes=")(arg)) {
                    return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)((function () {
                        var $115 = {};
                        for (var $116 in p) {
                            if ({}.hasOwnProperty.call(p, $116)) {
                                $115[$116] = p[$116];
                            };
                        };
                        $115.opts = (function () {
                            var $112 = {};
                            for (var $113 in p.opts) {
                                if ({}.hasOwnProperty.call(p.opts, $113)) {
                                    $112[$113] = p["opts"][$113];
                                };
                            };
                            $112.censorCodes = Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_Set.insert(Data_Ord.ordString))(p.opts.censorCodes)(Data_String.split(",")(Data_String.drop(15)(arg)));
                            return $112;
                        })();
                        return $115;
                    })());
                };
                if (isPrefix("--filter-codes=")(arg)) {
                    return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)((function () {
                        var $121 = {};
                        for (var $122 in p) {
                            if ({}.hasOwnProperty.call(p, $122)) {
                                $121[$122] = p[$122];
                            };
                        };
                        $121.opts = (function () {
                            var $118 = {};
                            for (var $119 in p.opts) {
                                if ({}.hasOwnProperty.call(p.opts, $119)) {
                                    $118[$119] = p["opts"][$119];
                                };
                            };
                            $118.filterCodes = Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_Set.insert(Data_Ord.ordString))(p.opts.filterCodes)(Data_String.split(",")(Data_String.drop(15)(arg)));
                            return $118;
                        })();
                        return $121;
                    })());
                };
                if (isPrefix("--is-lib=")(arg)) {
                    return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)((function () {
                        var $127 = {};
                        for (var $128 in p) {
                            if ({}.hasOwnProperty.call(p, $128)) {
                                $127[$128] = p[$128];
                            };
                        };
                        $127.opts = (function () {
                            var $124 = {};
                            for (var $125 in p.opts) {
                                if ({}.hasOwnProperty.call(p.opts, $125)) {
                                    $124[$125] = p["opts"][$125];
                                };
                            };
                            $124.libDirs = Data_Array.snoc(p.opts.libDirs)(Data_String.drop(9)(arg));
                            return $124;
                        })();
                        return $127;
                    })());
                };
                if (isPrefix("--purs=")(arg)) {
                    return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)((function () {
                        var $130 = {};
                        for (var $131 in p) {
                            if ({}.hasOwnProperty.call(p, $131)) {
                                $130[$131] = p[$131];
                            };
                        };
                        $130.purs = Data_String.drop(7)(arg);
                        return $130;
                    })());
                };
                if (isPrefix("--stash=")(arg)) {
                    return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)((function () {
                        var $133 = {};
                        for (var $134 in p) {
                            if ({}.hasOwnProperty.call(p, $134)) {
                                $133[$134] = p[$134];
                            };
                        };
                        $133.stash = true;
                        $133.stashFile = Data_String.drop(8)(arg);
                        return $133;
                    })());
                };
                if (Data_Boolean.otherwise) {
                    return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)((function () {
                        var $136 = {};
                        for (var $137 in p) {
                            if ({}.hasOwnProperty.call(p, $137)) {
                                $136[$137] = p[$137];
                            };
                        };
                        $136.extra = Data_Array.snoc(p.extra)(arg);
                        return $136;
                    })());
                };
                throw new Error("Failed pattern match at Main line 74, column 1 - line 149, column 20: " + [ p.constructor.name, arg.constructor.name ]);
            };
        };
        var defaultLibDir = function (x) {
            if (Data_Array.length(x.opts.libDirs) === 0) {
                var $143 = {};
                for (var $144 in x) {
                    if ({}.hasOwnProperty.call(x, $144)) {
                        $143[$144] = x[$144];
                    };
                };
                $143.opts = (function () {
                    var $140 = {};
                    for (var $141 in x.opts) {
                        if ({}.hasOwnProperty.call(x.opts, $141)) {
                            $140[$141] = x["opts"][$141];
                        };
                    };
                    $140.libDirs = [ "bower_components" ];
                    return $140;
                })();
                return $143;
            };
            if (Data_Boolean.otherwise) {
                return x;
            };
            throw new Error("Failed pattern match at Main line 74, column 1 - line 149, column 20: " + [ x.constructor.name ]);
        };
        return Data_Functor.map(Control_Monad_Eff.functorEff)(defaultLibDir)(Data_Array.foldM(Control_Monad_Eff.monadEff)(parse)({
            extra: [  ], 
            purs: "purs", 
            showSource: true, 
            stash: false, 
            stashFile: ".psa-stash", 
            jsonErrors: false, 
            opts: opts
        })(args));
    };
};
var defaultOptions = {
    ansi: true, 
    censorWarnings: false, 
    censorLib: false, 
    censorSrc: false, 
    censorCodes: Data_Set.empty, 
    filterCodes: Data_Set.empty, 
    verboseStats: false, 
    libDirs: [  ], 
    strict: false, 
    cwd: ""
};

// Due to `catchException` label annoyingness
var catchException$prime = function (eb) {
    return function (eff) {
        return Unsafe_Coerce.unsafeCoerce(Control_Monad_Eff_Exception.catchException(Unsafe_Coerce.unsafeCoerce(eb))(Unsafe_Coerce.unsafeCoerce(eff)));
    };
};
var main = (function () {
    
    // TODO: Handle exceptions
var stdio = [ new Data_Maybe.Just(Node_ChildProcess.Pipe.value), Node_ChildProcess["inherit"][1], new Data_Maybe.Just(Node_ChildProcess.Pipe.value) ];
    var spawn$prime = function (cmd) {
        return function (args) {
            return function (onExit) {
                return function __do() {
                    var v = Node_ChildProcess.spawn(cmd)(args)((function () {
                        var $146 = {};
                        for (var $147 in Node_ChildProcess.defaultSpawnOptions) {
                            if ({}.hasOwnProperty.call(Node_ChildProcess.defaultSpawnOptions, $147)) {
                                $146[$147] = Node_ChildProcess["defaultSpawnOptions"][$147];
                            };
                        };
                        $146.stdio = stdio;
                        return $146;
                    })())();
                    var v1 = Control_Monad_ST.newSTRef("")();
                    Node_Stream.onDataString(Node_ChildProcess.stderr(v))(Node_Encoding.UTF8.value)(function (chunk) {
                        return Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_ST.modifySTRef(v1)(function (v2) {
                            return v2 + chunk;
                        }));
                    })();
                    Node_ChildProcess.onExit(v)(function (status) {
                        if (status instanceof Node_ChildProcess.Normally) {
                            return function __do() {
                                Control_Bind.bind(Control_Monad_Eff.bindEff)(Control_Monad_ST.readSTRef(v1))(onExit)();
                                return Node_Process.exit(status.value0)();
                            };
                        };
                        if (status instanceof Node_ChildProcess.BySignal) {
                            return function __do() {
                                Control_Monad_Eff_Console.error(Data_Show.show(Data_Posix_Signal.showSignal)(status.value0))();
                                return Node_Process.exit(1)();
                            };
                        };
                        throw new Error("Failed pattern match at Main line 215, column 7 - line 222, column 5: " + [ status.constructor.name ]);
                    })();
                    return Node_ChildProcess.onError(v)(retryWithCmd(cmd)(args)(onExit))();
                };
            };
        };
    };
    var retryWithCmd = function (cmd) {
        return function (args) {
            return function (onExit) {
                return function (err) {
                    if (err.code === "ENOENT") {
                        var $158 = Data_Eq.eq(Node_Platform.eqPlatform)(Node_Process.platform)(Node_Platform.Win32.value);
                        if ($158) {
                            var $159 = Data_String.stripSuffix(".cmd")(cmd);
                            if ($159 instanceof Data_Maybe.Nothing) {
                                return spawn$prime(cmd + ".cmd")(args)(onExit);
                            };
                            if ($159 instanceof Data_Maybe.Just) {
                                return Control_Monad_Eff_Exception["throw"]("`" + ($159.value0 + ("` executable not found. (nor `" + (cmd + "`)"))));
                            };
                            throw new Error("Failed pattern match at Main line 229, column 10 - line 232, column 8: " + [ $159.constructor.name ]);
                        };
                        if (!$158) {
                            return Control_Monad_Eff_Exception["throw"]("`" + (cmd + "` executable not found."));
                        };
                        throw new Error("Failed pattern match at Main line 227, column 6 - line 234, column 5: " + [ $158.constructor.name ]);
                    };
                    if (Data_Boolean.otherwise) {
                        return Control_Monad_Eff_Exception.throwException(Node_ChildProcess.toStandardError(err));
                    };
                    throw new Error("Failed pattern match at Main line 164, column 1 - line 281, column 23: " + [ cmd.constructor.name, args.constructor.name, onExit.constructor.name, err.constructor.name ]);
                };
            };
        };
    };
    var mergeWarnings = function (filenames) {
        return function (date) {
            return function (old) {
                return function ($$new) {
                    return function __do() {
                        var v = Data_StrMap_ST["new"]();
                        var v1 = Data_Function.flip(Data_Array.filterM(Control_Monad_Eff.monadEff))(old)(function (x) {
                            if (x.filename instanceof Data_Maybe.Nothing) {
                                return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(false);
                            };
                            if (x.filename instanceof Data_Maybe.Just) {
                                var $163 = Data_Set.member(Data_Ord.ordString)(x.filename.value0)(filenames);
                                if ($163) {
                                    return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(false);
                                };
                                if (!$163) {
                                    return function __do() {
                                        var v1 = Data_StrMap_ST.peek(v)(x.filename.value0)();
                                        if (v1 instanceof Data_Maybe.Just) {
                                            return v1.value0;
                                        };
                                        if (v1 instanceof Data_Maybe.Nothing) {
                                            var v2 = catchException$prime(function (v2) {
                                                return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(false);
                                            })(Data_Functor.map(Control_Monad_Eff.functorEff)(function ($210) {
                                                return (function (v2) {
                                                    return Data_Ord.greaterThan(Data_DateTime.ordDateTime)(date)(v2);
                                                })(Node_FS_Stats.modifiedTime($210));
                                            })(Node_FS_Sync.stat(x.filename.value0)))();
                                            Data_StrMap_ST.poke(v)(x.filename.value0)(v2)();
                                            return v2;
                                        };
                                        throw new Error("Failed pattern match at Main line 274, column 15 - line 280, column 25: " + [ v1.constructor.name ]);
                                    };
                                };
                                throw new Error("Failed pattern match at Main line 270, column 11 - line 280, column 25: " + [ $163.constructor.name ]);
                            };
                            throw new Error("Failed pattern match at Main line 267, column 7 - line 280, column 25: " + [ x.filename.constructor.name ]);
                        })();
                        return Data_Semigroup.append(Data_Semigroup.semigroupArray)(v1)($$new);
                    };
                };
            };
        };
    };
    var loadNothing = function (v) {
        return function (v1) {
            return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Maybe.Nothing.value);
        };
    };
    var loadLines = function (files) {
        return function (filename) {
            return function (pos) {
                return function __do() {
                    var v = (function __do() {
                        var cache = Data_StrMap_ST.peek(files)(filename)();
                        if (cache instanceof Data_Maybe.Just) {
                            return cache.value0;
                        };
                        if (cache instanceof Data_Maybe.Nothing) {
                            var v = Data_Functor.map(Control_Monad_Eff.functorEff)(Data_String.split("\x0a"))(Node_FS_Sync.readTextFile(Node_Encoding.UTF8.value)(filename))();
                            Data_StrMap_ST.poke(files)(filename)(v)();
                            return v;
                        };
                        throw new Error("Failed pattern match at Main line 240, column 7 - line 245, column 21: " + [ cache.constructor.name ]);
                    })();
                    var source = Data_Array.slice(pos.startLine - 1 | 0)(pos.endLine)(v);
                    return new Data_Maybe.Just(source);
                };
            };
        };
    };
    var insertFilenames = Data_Foldable.foldr(Data_Foldable.foldableArray)(function (x) {
        return function (s) {
            return Data_Maybe.maybe(s)(Data_Function.flip(Data_Set.insert(Data_Ord.ordString))(s))(x.filename);
        };
    });
    var encodeStash = function (s) {
        return Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonArray(Data_Argonaut_Encode_Class.encodeJsonJson))(Data_Functor.map(Data_Functor.functorArray)(Psa_Types.encodePsaError)(s));
    };
    var writeStashFile = function (stashFile) {
        return function (warnings) {
            var file = Data_Argonaut_Printer.printJson(Data_Argonaut_Printer.printerString)(encodeStash(warnings));
            return Node_FS_Sync.writeTextFile(Node_Encoding.UTF8.value)(stashFile)(file);
        };
    };
    var emptyStash = Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Functor.map(Data_Functor.functorFn)(function (v) {
        return {
            date: v, 
            stash: [  ]
        };
    })(Data_DateTime_Instant.toDateTime))(Control_Monad_Eff_Now.now);
    var decodeStash = function (s) {
        return Control_Bind.bind(Data_Either.bindEither)(Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Parser.jsonParser(s))(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeArray(Data_Argonaut_Decode_Class.decodeStrMap(Data_Argonaut_Decode_Class.decodeJsonJson)))))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(Psa_Types.parsePsaError));
    };
    var readStashFile = function (stashFile) {
        return catchException$prime(Data_Function["const"](emptyStash))(function __do() {
            var v = Node_FS_Sync.stat(stashFile)();
            var v1 = Node_FS_Sync.readTextFile(Node_Encoding.UTF8.value)(stashFile)();
            var $177 = decodeStash(v1);
            if ($177 instanceof Data_Either.Left) {
                return emptyStash();
            };
            if ($177 instanceof Data_Either.Right) {
                return {
                    date: Node_FS_Stats.modifiedTime(v), 
                    stash: $177.value0
                };
            };
            throw new Error("Failed pattern match at Main line 256, column 5 - line 258, column 67: " + [ $177.constructor.name ]);
        });
    };
    return Data_Functor["void"](Control_Monad_Eff.functorEff)(function __do() {
        var v = Node_Process.cwd();
        var v1 = Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Array.drop(2))(Node_Process.argv)();
        var v2 = parseOptions((function () {
            var $182 = {};
            for (var $183 in defaultOptions) {
                if ({}.hasOwnProperty.call(defaultOptions, $183)) {
                    $182[$183] = defaultOptions[$183];
                };
            };
            $182.cwd = v;
            return $182;
        })())(v1)();
        var opts$prime = (function () {
            var $186 = {};
            for (var $187 in v2.opts) {
                if ({}.hasOwnProperty.call(v2.opts, $187)) {
                    $186[$187] = v2["opts"][$187];
                };
            };
            $186.libDirs = Data_Functor.map(Data_Functor.functorArray)(function ($211) {
                return (function (v4) {
                    return v4 + Node_Path.sep;
                })(Node_Path.resolve([ v ])($211));
            })(v2.opts.libDirs);
            return $186;
        })();
        var args = Data_Array.cons("compile")(Data_Array.cons("--json-errors")(v2.extra));
        var v3 = (function () {
            if (v2.stash) {
                return readStashFile(v2.stashFile);
            };
            if (!v2.stash) {
                return emptyStash;
            };
            throw new Error("Failed pattern match at Main line 181, column 5 - line 183, column 22: " + [ v2.stash.constructor.name ]);
        })()();
        return spawn$prime(v2.purs)(args)(function (buffer) {
            var stderr = Data_String.split("\x0a")(buffer);
            return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)(stderr)(function (err) {
                var $191 = Control_Bind.bind(Data_Either.bindEither)(Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Parser.jsonParser(err))(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeStrMap(Data_Argonaut_Decode_Class.decodeJsonJson))))(Psa_Types.parsePsaResult);
                if ($191 instanceof Data_Either.Left) {
                    return Control_Monad_Eff_Console.error(err);
                };
                if ($191 instanceof Data_Either.Right) {
                    return function __do() {
                        var v4 = Data_StrMap_ST["new"]();
                        var loadLinesImpl = (function () {
                            if (v2.showSource) {
                                return loadLines(v4);
                            };
                            if (!v2.showSource) {
                                return loadNothing;
                            };
                            throw new Error("Failed pattern match at Main line 192, column 31 - line 192, column 82: " + [ v2.showSource.constructor.name ]);
                        })();
                        var filenames = insertFilenames(insertFilenames(Data_Set.empty)($191.value0.errors))($191.value0.warnings);
                        var v5 = mergeWarnings(filenames)(v3.date)(v3.stash)($191.value0.warnings)();
                        Control_Applicative.when(Control_Monad_Eff.applicativeEff)(v2.stash)(writeStashFile(v2.stashFile)(v5))();
                        var v6 = Psa_Output.output(Control_Monad_Eff.monadEff)(loadLinesImpl)(opts$prime)((function () {
                            var $196 = {};
                            for (var $197 in $191.value0) {
                                if ({}.hasOwnProperty.call($191.value0, $197)) {
                                    $196[$197] = $191["value0"][$197];
                                };
                            };
                            $196.warnings = v5;
                            return $196;
                        })())();
                        (function () {
                            if (v2.jsonErrors) {
                                return Psa_Printer_Json.print(v6);
                            };
                            if (!v2.jsonErrors) {
                                return Psa_Printer_Default.print(opts$prime)(v6);
                            };
                            throw new Error("Failed pattern match at Main line 197, column 11 - line 199, column 49: " + [ v2.jsonErrors.constructor.name ]);
                        })()();
                        var $201 = Data_StrMap.isEmpty(v6.stats.allErrors);
                        if ($201) {
                            return Node_Process.exit(0)();
                        };
                        if (!$201) {
                            return Node_Process.exit(1)();
                        };
                        throw new Error("Failed pattern match at Main line 200, column 11 - line 204, column 3: " + [ $201.constructor.name ]);
                    };
                };
                throw new Error("Failed pattern match at Main line 188, column 7 - line 204, column 3: " + [ $191.constructor.name ]);
            });
        })();
    });
})();
module.exports = {
    "catchException'": catchException$prime, 
    defaultOptions: defaultOptions, 
    main: main, 
    parseOptions: parseOptions, 
    usage: usage, 
    version: $foreign.version
};
