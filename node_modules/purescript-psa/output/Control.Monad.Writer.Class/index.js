// Generated by psc version 0.10.7

// | This module defines the `MonadWriter` type class and its instances.
"use strict";
var Prelude = require("../Prelude");
var Data_Tuple = require("../Data.Tuple");
var Control_Bind = require("../Control.Bind");
var Data_Function = require("../Data.Function");
var Control_Applicative = require("../Control.Applicative");

// | The `MonadTell w` type class represents those monads which support a

// | monoidal accumulator of type `w`, were `tell` appends a value to the

// | accumulator.

// |

// | An implementation is provided for `WriterT`, and for other monad

// | transformers defined in this library.

// |

// | Law:

// |

// | - `do { tell x ; tell y } = tell (x <> y)`
var MonadTell = function (__superclass_Control$dotMonad$dotMonad_0, tell) {
    this["__superclass_Control.Monad.Monad_0"] = __superclass_Control$dotMonad$dotMonad_0;
    this.tell = tell;
};

// | An extension of the `MonadTell` class that introduces some operations on

// | the accumulator:

// |

// | - `listen` modifies the result to include the changes to the accumulator.

// | - `pass` applies the returned function to the accumulator.

// |

// | An implementation is provided for `WriterT`, and for other monad

// | transformers defined in this library.

// |

// | Laws in addition to the `MonadTell` law:

// |

// | - `do { tell x ; tell y } = tell (x <> y)`

// | - `listen (pure a) = pure (Tuple a mempty)`

// | - `listen (writer a x) = tell x $> Tuple a x`
var MonadWriter = function (__superclass_Control$dotMonad$dotWriter$dotClass$dotMonadTell_0, listen, pass) {
    this["__superclass_Control.Monad.Writer.Class.MonadTell_0"] = __superclass_Control$dotMonad$dotWriter$dotClass$dotMonadTell_0;
    this.listen = listen;
    this.pass = pass;
};

// | The `MonadTell w` type class represents those monads which support a

// | monoidal accumulator of type `w`, were `tell` appends a value to the

// | accumulator.

// |

// | An implementation is provided for `WriterT`, and for other monad

// | transformers defined in this library.

// |

// | Law:

// |

// | - `do { tell x ; tell y } = tell (x <> y)`
var tell = function (dict) {
    return dict.tell;
};

// | An extension of the `MonadTell` class that introduces some operations on

// | the accumulator:

// |

// | - `listen` modifies the result to include the changes to the accumulator.

// | - `pass` applies the returned function to the accumulator.

// |

// | An implementation is provided for `WriterT`, and for other monad

// | transformers defined in this library.

// |

// | Laws in addition to the `MonadTell` law:

// |

// | - `do { tell x ; tell y } = tell (x <> y)`

// | - `listen (pure a) = pure (Tuple a mempty)`

// | - `listen (writer a x) = tell x $> Tuple a x`
var pass = function (dict) {
    return dict.pass;
};

// | An extension of the `MonadTell` class that introduces some operations on

// | the accumulator:

// |

// | - `listen` modifies the result to include the changes to the accumulator.

// | - `pass` applies the returned function to the accumulator.

// |

// | An implementation is provided for `WriterT`, and for other monad

// | transformers defined in this library.

// |

// | Laws in addition to the `MonadTell` law:

// |

// | - `do { tell x ; tell y } = tell (x <> y)`

// | - `listen (pure a) = pure (Tuple a mempty)`

// | - `listen (writer a x) = tell x $> Tuple a x`
var listen = function (dict) {
    return dict.listen;
};

// | Projects a value from modifications made to the accumulator during an

// | action.
var listens = function (dictMonadWriter) {
    return function (f) {
        return function (m) {
            return Control_Bind.bind(((dictMonadWriter["__superclass_Control.Monad.Writer.Class.MonadTell_0"]())["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())(listen(dictMonadWriter)(m))(function (v) {
                return Control_Applicative.pure(((dictMonadWriter["__superclass_Control.Monad.Writer.Class.MonadTell_0"]())["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]())(new Data_Tuple.Tuple(v.value0, f(v.value1)));
            });
        };
    };
};

// | Modify the final accumulator value by applying a function.
var censor = function (dictMonadWriter) {
    return function (f) {
        return function (m) {
            return pass(dictMonadWriter)(Control_Bind.bind(((dictMonadWriter["__superclass_Control.Monad.Writer.Class.MonadTell_0"]())["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())(m)(function (v) {
                return Control_Applicative.pure(((dictMonadWriter["__superclass_Control.Monad.Writer.Class.MonadTell_0"]())["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]())(new Data_Tuple.Tuple(v, f));
            }));
        };
    };
};
module.exports = {
    MonadTell: MonadTell, 
    MonadWriter: MonadWriter, 
    censor: censor, 
    listen: listen, 
    listens: listens, 
    pass: pass, 
    tell: tell
};
