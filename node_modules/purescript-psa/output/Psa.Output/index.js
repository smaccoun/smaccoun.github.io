// Generated by psc version 0.10.7
"use strict";
var Prelude = require("../Prelude");
var Data_Array = require("../Data.Array");
var Data_Foldable = require("../Data.Foldable");
var Data_Maybe = require("../Data.Maybe");
var Data_Set = require("../Data.Set");
var Data_StrMap = require("../Data.StrMap");
var Data_String = require("../Data.String");
var Data_Tuple = require("../Data.Tuple");
var Node_Path = require("../Node.Path");
var Psa_Types = require("../Psa.Types");
var Data_Eq = require("../Data.Eq");
var Data_Ord = require("../Data.Ord");
var Data_Ring = require("../Data.Ring");
var Data_Semiring = require("../Data.Semiring");
var Data_Boolean = require("../Data.Boolean");
var Data_Function = require("../Data.Function");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Bounded = require("../Data.Bounded");
var Control_Category = require("../Control.Category");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Control_Apply = require("../Control.Apply");
var Data_Functor = require("../Data.Functor");
var Control_Applicative = require("../Control.Applicative");
var Data_Semigroup = require("../Data.Semigroup");
var Control_Bind = require("../Control.Bind");
var $$Error = (function () {
    function $$Error() {

    };
    $$Error.value = new $$Error();
    return $$Error;
})();
var Warning = (function () {
    function Warning() {

    };
    Warning.value = new Warning();
    return Warning;
})();
var trimPosition = function (__copy_lines) {
    return function (__copy_pos) {
        var lines = __copy_lines;
        var pos = __copy_pos;
        tco: while (true) {
            var isPunc = function (v) {
                if (v === " ") {
                    return true;
                };
                if (v === ",") {
                    return true;
                };
                return false;
            };
            var trimComment = function (col) {
                return function (l) {
                    var $29 = Data_String.indexOf("--")(l);
                    if ($29 instanceof Data_Maybe.Just && $29.value0 === 0) {
                        return Data_Maybe.Nothing.value;
                    };
                    if ($29 instanceof Data_Maybe.Just && $29.value0 < (col - 1 | 0)) {
                        return trimCol($29.value0 + 1 | 0)(l);
                    };
                    return new Data_Maybe.Just(col);
                };
            };
            var trimCol = function (__copy_col) {
                return function (__copy_l) {
                    var col = __copy_col;
                    var l = __copy_l;
                    tco: while (true) {
                        var $32 = Data_String.charAt(col - 2 | 0)(l);
                        if ($32 instanceof Data_Maybe.Just && isPunc($32.value0)) {
                            var __tco_col = col - 1 | 0;
                            var __tco_l = l;
                            col = __tco_col;
                            l = __tco_l;
                            continue tco;
                        };
                        if ($32 instanceof Data_Maybe.Just) {
                            return trimComment(col)(l);
                        };
                        return Data_Maybe.Nothing.value;
                    };
                };
            };
            var trimPos = function (__copy_v) {
                var v = __copy_v;
                tco: while (true) {
                    if (v.col <= 1) {
                        var $36 = Data_Array.index(lines)((v.row - pos.startLine | 0) - 1 | 0);
                        if ($36 instanceof Data_Maybe.Just) {
                            var __tco_v = {
                                row: v.row - 1 | 0, 
                                col: Data_String.length($36.value0) + 1 | 0
                            };
                            v = __tco_v;
                            continue tco;
                        };
                        return Data_Maybe.Nothing.value;
                    };
                    if (Data_Boolean.otherwise) {
                        var $38 = Data_Array.index(lines)(v.row - pos.startLine | 0);
                        if ($38 instanceof Data_Maybe.Just) {
                            var $39 = trimCol(v.col)($38.value0);
                            if ($39 instanceof Data_Maybe.Just) {
                                return new Data_Maybe.Just({
                                    row: v.row, 
                                    col: $39.value0
                                });
                            };
                            if ($39 instanceof Data_Maybe.Nothing) {
                                var __tco_v = {
                                    row: v.row, 
                                    col: 1
                                };
                                v = __tco_v;
                                continue tco;
                            };
                            throw new Error("Failed pattern match at Psa.Output line 218, column 11 - line 220, column 49: " + [ $39.constructor.name ]);
                        };
                        return Data_Maybe.Nothing.value;
                    };
                    throw new Error("Failed pattern match at Psa.Output line 187, column 1 - line 240, column 21: " + [ v.constructor.name ]);
                };
            };
            if (lines.length === 0) {
                return {
                    startLine: pos.startLine, 
                    startColumn: pos.startColumn, 
                    endLine: pos.startLine, 
                    endColumn: pos.startColumn
                };
            };
            if (lines.length === 1) {
                var $45 = trimCol(pos.endColumn)(lines[0]);
                if ($45 instanceof Data_Maybe.Just) {
                    var $46 = {};
                    for (var $47 in pos) {
                        if ({}.hasOwnProperty.call(pos, $47)) {
                            $46[$47] = pos[$47];
                        };
                    };
                    $46.endLine = pos.startLine;
                    $46.endColumn = $45.value0;
                    return $46;
                };
                if ($45 instanceof Data_Maybe.Nothing) {
                    var $50 = {};
                    for (var $51 in pos) {
                        if ({}.hasOwnProperty.call(pos, $51)) {
                            $50[$51] = pos[$51];
                        };
                    };
                    $50.endLine = pos.startLine;
                    $50.endColumn = pos.startColumn;
                    return $50;
                };
                throw new Error("Failed pattern match at Psa.Output line 197, column 7 - line 199, column 81: " + [ $45.constructor.name ]);
            };
            var $54 = trimPos({
                row: pos.endLine, 
                col: pos.endColumn
            });
            if ($54 instanceof Data_Maybe.Just) {
                var $55 = {};
                for (var $56 in pos) {
                    if ({}.hasOwnProperty.call(pos, $56)) {
                        $55[$56] = pos[$56];
                    };
                };
                $55.endLine = $54.value0.row;
                $55.endColumn = $54.value0.col;
                return $55;
            };
            if ($54 instanceof Data_Maybe.Nothing) {
                var __tco_lines = [  ];
                var __tco_pos = pos;
                lines = __tco_lines;
                pos = __tco_pos;
                continue tco;
            };
            throw new Error("Failed pattern match at Psa.Output line 202, column 7 - line 204, column 49: " + [ $54.constructor.name ]);
        };
    };
};

// | Trims extraneous whitespace from psc error messages.
var trimMessage = (function () {
    var dedent = function (v) {
        return function (l) {
            if (l === "") {
                return {
                    lines: Data_Array.snoc(v.lines)(l), 
                    indent: v.indent
                };
            };
            if (Data_Boolean.otherwise) {
                var indent$prime = Data_String.length(Data_String.takeWhile(function (v1) {
                    return v1 === " ";
                })(l));
                var $63 = indent$prime < v.indent;
                if ($63) {
                    return {
                        lines: Data_Array.snoc(v.lines)(Data_String.drop(indent$prime)(l)), 
                        indent: indent$prime
                    };
                };
                if (!$63) {
                    return {
                        lines: Data_Array.snoc(v.lines)(Data_String.drop(v.indent)(l)), 
                        indent: v.indent
                    };
                };
                throw new Error("Failed pattern match at Psa.Output line 257, column 7 - line 259, column 69: " + [ $63.constructor.name ]);
            };
            throw new Error("Failed pattern match at Psa.Output line 261, column 3 - line 264, column 45: " + [ v.constructor.name, l.constructor.name ]);
        };
    };
    var collapse = function (lines) {
        return function (l) {
            var $66 = Data_Array.last(lines);
            if ($66 instanceof Data_Maybe.Just && ($66.value0 === "" && l === "")) {
                return lines;
            };
            return Data_Array.snoc(lines)(l);
        };
    };
    return function ($127) {
        return (function ($128) {
            return (function ($129) {
                return Data_String.trim(Data_String.joinWith("\x0a")($129));
            })(Data_Foldable.foldl(Data_Foldable.foldableArray)(collapse)([  ])((function (v) {
                return v.lines;
            })($128)));
        })(Data_Foldable.foldl(Data_Foldable.foldableArray)(dedent)({
            lines: [  ], 
            indent: Data_Bounded.top(Data_Bounded.boundedInt)
        })(Data_String.split("\x0a")($127)));
    };
})();
var partition = function (f) {
    var go = function (v) {
        return function (x) {
            var $70 = f(x);
            if ($70) {
                return {
                    pass: Data_Array.snoc(v.pass)(x), 
                    fail: v.fail
                };
            };
            if (!$70) {
                return {
                    pass: v.pass, 
                    fail: Data_Array.snoc(v.fail)(x)
                };
            };
            throw new Error("Failed pattern match at Psa.Output line 117, column 5 - line 119, column 45: " + [ $70.constructor.name ]);
        };
    };
    return Data_Foldable.foldl(Data_Foldable.foldableArray)(go)({
        pass: [  ], 
        fail: [  ]
    });
};
var onTag = function (f) {
    return function (g) {
        return function (v) {
            return function (x) {
                if (v instanceof $$Error) {
                    return f(x);
                };
                if (v instanceof Warning) {
                    return g(x);
                };
                throw new Error("Failed pattern match at Psa.Output line 163, column 1 - line 163, column 26: " + [ f.constructor.name, g.constructor.name, v.constructor.name, x.constructor.name ]);
            };
        };
    };
};
var onPath = function (f) {
    return function (g) {
        return function (v) {
            return function (x) {
                if (v instanceof Psa_Types.Src) {
                    return f(x);
                };
                if (v instanceof Psa_Types.Lib) {
                    return g(x);
                };
                return x;
            };
        };
    };
};
var updateStats = function (tag) {
    return function (path) {
        return function (code) {
            return function (printed) {
                return function (s) {
                    var bump = function (v) {
                        return new Data_Tuple.Tuple((function () {
                            if (printed) {
                                return v.value0 + 1 | 0;
                            };
                            if (!printed) {
                                return v.value0;
                            };
                            throw new Error("Failed pattern match at Psa.Output line 139, column 29 - line 139, column 57: " + [ printed.constructor.name ]);
                        })(), v.value1 + 1 | 0);
                    };
                    var alterStat = function (v) {
                        if (v instanceof Data_Maybe.Nothing) {
                            return new Data_Maybe.Just(bump(new Data_Tuple.Tuple(0, 0)));
                        };
                        if (v instanceof Data_Maybe.Just) {
                            return new Data_Maybe.Just(bump(v.value0));
                        };
                        throw new Error("Failed pattern match at Psa.Output line 128, column 1 - line 141, column 37: " + [ v.constructor.name ]);
                    };
                    var bumpCode = Data_StrMap.alter(alterStat)(code);
                    return {
                        allWarnings: onTag(Control_Category.id(Control_Category.categoryFn))(bumpCode)(tag)(s.allWarnings), 
                        allErrors: onTag(bumpCode)(Control_Category.id(Control_Category.categoryFn))(tag)(s.allErrors), 
                        srcWarnings: onTag(Control_Category.id(Control_Category.categoryFn))(onPath(bumpCode)(Control_Category.id(Control_Category.categoryFn))(path))(tag)(s.srcWarnings), 
                        srcErrors: onTag(onPath(bumpCode)(Control_Category.id(Control_Category.categoryFn))(path))(Control_Category.id(Control_Category.categoryFn))(tag)(s.srcErrors), 
                        libWarnings: onTag(Control_Category.id(Control_Category.categoryFn))(onPath(Control_Category.id(Control_Category.categoryFn))(bumpCode)(path))(tag)(s.libWarnings), 
                        libErrors: onTag(onPath(Control_Category.id(Control_Category.categoryFn))(bumpCode)(path))(Control_Category.id(Control_Category.categoryFn))(tag)(s.libErrors)
                    };
                };
            };
        };
    };
};
var isWarning = function (v) {
    if (v instanceof Warning) {
        return true;
    };
    return false;
};
var isSrc = function (v) {
    if (v instanceof Psa_Types.Src) {
        return true;
    };
    return false;
};
var isLib = function (v) {
    if (v instanceof Psa_Types.Lib) {
        return true;
    };
    return false;
};
var shouldShowError = function (v) {
    return function (v1) {
        return function (v2) {
            return function (v3) {
                if (v1 instanceof $$Error) {
                    return true;
                };
                return !v.censorWarnings && (!(v.censorSrc && isSrc(v2) || v.censorLib && isLib(v2)) && ((Data_Set.isEmpty(v.filterCodes) || Data_Set.member(Data_Ord.ordString)(v3)(v.filterCodes)) && (Data_Set.isEmpty(v.censorCodes) || !Data_Set.member(Data_Ord.ordString)(v3)(v.censorCodes))));
            };
        };
    };
};
var initialStats = {
    allWarnings: Data_StrMap.empty, 
    allErrors: Data_StrMap.empty, 
    srcWarnings: Data_StrMap.empty, 
    srcErrors: Data_StrMap.empty, 
    libWarnings: Data_StrMap.empty, 
    libErrors: Data_StrMap.empty
};
var errorPath = function (libDirs) {
    return function (path) {
        return function ($$short) {
            var startsWith = function (s$prime) {
                return function (s) {
                    var $103 = Data_String.indexOf(s)(s$prime);
                    if ($103 instanceof Data_Maybe.Just && $103.value0 === 0) {
                        return true;
                    };
                    return false;
                };
            };
            var $105 = Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (dir) {
                return startsWith(path)(dir);
            })(libDirs);
            if ($105) {
                return new Psa_Types.Lib($$short);
            };
            if (!$105) {
                return new Psa_Types.Src($$short);
            };
            throw new Error("Failed pattern match at Psa.Output line 153, column 3 - line 155, column 19: " + [ $105.constructor.name ]);
        };
    };
};
var annotatedError = function (path) {
    return function (lines) {
        return function (error) {
            var position = Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(trimPosition)(lines))(error.position);
            var source = Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(function (p) {
                return Data_Array.take((p.endLine - p.startLine | 0) + 1 | 0);
            })(position))(lines);
            var message = trimMessage(error.message);
            return {
                path: path, 
                position: position, 
                message: message, 
                source: source, 
                error: error
            };
        };
    };
};

// | Annotates a error/warning result set with original source lines, better

// | positions, and semantic paths (lib vs src). The callback should load the

// | requested set of lines from the absolute filename based on the tentative

// | position information.
var output = function (dictMonad) {
    return function (loadLines) {
        return function (options) {
            return function (result) {
                var pathOf = function (x) {
                    if (x.filename instanceof Data_Maybe.Just) {
                        return new Data_Tuple.Tuple(errorPath(options.libDirs)(x.filename.value0)(Node_Path.relative(options.cwd)(x.filename.value0)), x);
                    };
                    if (x.filename instanceof Data_Maybe.Nothing) {
                        return new Data_Tuple.Tuple(Psa_Types.Unknown.value, x);
                    };
                    throw new Error("Failed pattern match at Psa.Output line 81, column 5 - line 83, column 33: " + [ x.filename.constructor.name ]);
                };
                var onError = function (tag) {
                    return function (state) {
                        return function (v) {
                            var update = function (log) {
                                var printed = !Data_Array["null"](log);
                                var tag$prime = (function () {
                                    var $111 = printed && (options.strict && isSrc(v.value0));
                                    if ($111) {
                                        return $$Error.value;
                                    };
                                    if (!$111) {
                                        return tag;
                                    };
                                    throw new Error("Failed pattern match at Psa.Output line 103, column 14 - line 103, column 76: " + [ $111.constructor.name ]);
                                })();
                                var stats = updateStats(tag$prime)(v.value0)(v.value1.errorCode)(printed)(state.stats);
                                return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(onTag(function (v1) {
                                    var $112 = {};
                                    for (var $113 in v1) {
                                        if ({}.hasOwnProperty.call(v1, $113)) {
                                            $112[$113] = v1[$113];
                                        };
                                    };
                                    $112.stats = stats;
                                    $112.errors = Data_Semigroup.append(Data_Semigroup.semigroupArray)(state.errors)(log);
                                    return $112;
                                })(function (v1) {
                                    var $115 = {};
                                    for (var $116 in v1) {
                                        if ({}.hasOwnProperty.call(v1, $116)) {
                                            $115[$116] = v1[$116];
                                        };
                                    };
                                    $115.stats = stats;
                                    $115.warnings = Data_Semigroup.append(Data_Semigroup.semigroupArray)(state.warnings)(log);
                                    return $115;
                                })(tag$prime)(state));
                            };
                            var $118 = shouldShowError(options)(tag)(v.value0)(v.value1.errorCode);
                            if ($118) {
                                return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(Data_Maybe.fromMaybe(Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(Data_Maybe.Nothing.value))(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(loadLines)(v.value1.filename))(v.value1.position)))(function (v1) {
                                    return update([ annotatedError(v.value0)(v1)(v.value1) ]);
                                });
                            };
                            if (!$118) {
                                return update([  ]);
                            };
                            throw new Error("Failed pattern match at Psa.Output line 87, column 5 - line 92, column 18: " + [ $118.constructor.name ]);
                        };
                    };
                };
                var result$prime = {
                    warnings: Data_Functor.map(Data_Functor.functorArray)(pathOf)(result.warnings), 
                    errors: Data_Functor.map(Data_Functor.functorArray)(pathOf)(result.errors)
                };
                var initialState = {
                    warnings: [  ], 
                    errors: [  ], 
                    stats: initialStats
                };
                return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(Data_Array.foldM(dictMonad)(onError(Warning.value))(initialState)(result$prime.warnings))(function (v) {
                    return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(Data_Array.foldM(dictMonad)(onError($$Error.value))(v)(result$prime.errors))(function (v1) {
                        return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())((function () {
                            var $124 = {};
                            for (var $125 in v1) {
                                if ({}.hasOwnProperty.call(v1, $125)) {
                                    $124[$125] = v1[$125];
                                };
                            };
                            $124.warnings = Data_Array.sortBy(Psa_Types.compareByLocation)(v1.warnings);
                            $124.errors = Data_Array.sortBy(Psa_Types.compareByLocation)(v1.errors);
                            return $124;
                        })());
                    });
                });
            };
        };
    };
};
module.exports = {
    annotatedError: annotatedError, 
    output: output, 
    trimMessage: trimMessage, 
    trimPosition: trimPosition
};
