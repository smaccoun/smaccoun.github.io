// Generated by psc version 0.10.7
"use strict";
var $foreign = require("./foreign");
var Data_Semiring = require("../Data.Semiring");
var Data_Unit = require("../Data.Unit");

// | The `Ring` class is for types that support addition, multiplication,

// | and subtraction operations.

// |

// | Instances must satisfy the following law in addition to the `Semiring`

// | laws:

// |

// | - Additive inverse: `a - a = (zero - a) + a = zero`
var Ring = function (__superclass_Data$dotSemiring$dotSemiring_0, sub) {
    this["__superclass_Data.Semiring.Semiring_0"] = __superclass_Data$dotSemiring$dotSemiring_0;
    this.sub = sub;
};

// | The `Ring` class is for types that support addition, multiplication,

// | and subtraction operations.

// |

// | Instances must satisfy the following law in addition to the `Semiring`

// | laws:

// |

// | - Additive inverse: `a - a = (zero - a) + a = zero`
var sub = function (dict) {
    return dict.sub;
};
var ringUnit = new Ring(function () {
    return Data_Semiring.semiringUnit;
}, function (v) {
    return function (v1) {
        return Data_Unit.unit;
    };
});
var ringNumber = new Ring(function () {
    return Data_Semiring.semiringNumber;
}, $foreign.numSub);
var ringInt = new Ring(function () {
    return Data_Semiring.semiringInt;
}, $foreign.intSub);

// | `negate x` can be used as a shorthand for `zero - x`.
var negate = function (dictRing) {
    return function (a) {
        return sub(dictRing)(Data_Semiring.zero(dictRing["__superclass_Data.Semiring.Semiring_0"]()))(a);
    };
};
module.exports = {
    Ring: Ring, 
    negate: negate, 
    sub: sub, 
    ringInt: ringInt, 
    ringNumber: ringNumber, 
    ringUnit: ringUnit
};
