// Generated by psc version 0.10.7
"use strict";
var Prelude = require("../Prelude");
var Data_Array = require("../Data.Array");
var Data_Foldable = require("../Data.Foldable");
var Data_Maybe = require("../Data.Maybe");
var Data_Monoid = require("../Data.Monoid");
var Data_String = require("../Data.String");
var Data_StrMap = require("../Data.StrMap");
var Data_Tuple = require("../Data.Tuple");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Monad_Eff_Console = require("../Control.Monad.Eff.Console");
var Ansi_Output = require("../Ansi.Output");
var Ansi_Codes = require("../Ansi.Codes");
var Psa_Types = require("../Psa.Types");
var Psa_Output = require("../Psa.Output");
var Psa_Printer = require("../Psa.Printer");
var Psa_Util = require("../Psa.Util");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Functor = require("../Data.Functor");
var Data_Function = require("../Data.Function");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Show = require("../Data.Show");
var Data_Semiring = require("../Data.Semiring");
var Data_Ord = require("../Data.Ord");
var Data_Ring = require("../Data.Ring");
var Data_Eq = require("../Data.Eq");
var Control_Apply = require("../Control.Apply");
var Control_Bind = require("../Control.Bind");
var toLines = function ($33) {
    return Psa_Printer.para(Data_Functor.map(Data_Functor.functorArray)(function ($34) {
        return Psa_Printer.line(Data_Array.singleton(Psa_Printer.plain($34)));
    })(Data_String.split("\x0a")($33)));
};
var renderStatus = function (gfx) {
    return function (total) {
        return function (index) {
            return function (code) {
                return Psa_Printer.style(gfx)("[" + (Data_Show.show(Data_Show.showInt)(index) + ("/" + (Data_Show.show(Data_Show.showInt)(total) + (" " + (code + "]"))))));
            };
        };
    };
};
var renderStatCols = function (col1) {
    return function (col2) {
        return function (col3) {
            return function (col4) {
                var lineLength = function ($35) {
                    return Data_Foldable.sum(Data_Foldable.foldableArray)(Data_Semiring.semiringInt)(Data_Functor.map(Data_Functor.functorArray)(Psa_Printer.ansiLength)($35));
                };
                var gutter = [ Psa_Printer.plain("   ") ];
                var catRow = function (c1) {
                    return function (c2) {
                        return function (c3) {
                            return function (c4) {
                                return Psa_Printer.line(Data_Semigroup.append(Data_Semigroup.semigroupArray)(c1)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(gutter)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(c2)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(gutter)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(c3)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(gutter)(c4)))))));
                            };
                        };
                    };
                };
                var align = function (f) {
                    return function (ls) {
                        var max = Data_Maybe.fromMaybe(0)(Data_Foldable.maximum(Data_Ord.ordInt)(Data_Foldable.foldableArray)(Data_Functor.map(Data_Functor.functorArray)(lineLength)(ls)));
                        var pad = function (l) {
                            return f(Psa_Printer.plain(Psa_Util.replicate(Data_Monoid.monoidString)(max - lineLength(l) | 0)(" ")))(l);
                        };
                        return Data_Functor.map(Data_Functor.functorArray)(pad)(ls);
                    };
                };
                var alignLeft = align(function (a) {
                    return function (as) {
                        return Data_Array.snoc(as)(a);
                    };
                });
                var alignRight = align(function (a) {
                    return function (as) {
                        return Data_Array.cons(a)(as);
                    };
                });
                return Psa_Printer.para(Data_Array.zipWith(Data_Function.apply)(Data_Array.zipWith(Data_Function.apply)(Data_Array.zipWith(Data_Function.apply)(Data_Functor.map(Data_Functor.functorArray)(catRow)(alignLeft(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ [ Psa_Printer.plain("") ] ])(col1))))(alignLeft(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ [ Psa_Printer.plain("Src") ] ])(col2))))(alignLeft(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ [ Psa_Printer.plain("Lib") ] ])(col3))))(alignLeft(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ [ Psa_Printer.plain("All") ] ])(col4))));
            };
        };
    };
};
var renderStat = function (v) {
    if (v.value0 === 0 && v.value1 === 0) {
        return [ Psa_Printer.style(Ansi_Output.foreground(Ansi_Codes.Green.value))("0") ];
    };
    if (v.value0 === v.value1) {
        return [ Psa_Printer.plain(Data_Show.show(Data_Show.showInt)(v.value0)) ];
    };
    return [ Psa_Printer.plain(Data_Show.show(Data_Show.showInt)(v.value0)), Psa_Printer.style(Ansi_Output.dim)("/" + Data_Show.show(Data_Show.showInt)(v.value1)) ];
};
var renderStats = function (stats) {
    var sumRatio = function (v) {
        return function (v1) {
            return function (v2) {
                return new Data_Tuple.Tuple(v.value0 + v2.value0 | 0, v.value1 + v2.value1 | 0);
            };
        };
    };
    var srcWarnings = Data_StrMap.fold(sumRatio)(new Data_Tuple.Tuple(0, 0))(stats.srcWarnings);
    var srcErrors = Data_StrMap.fold(sumRatio)(new Data_Tuple.Tuple(0, 0))(stats.srcErrors);
    var libWarnings = Data_StrMap.fold(sumRatio)(new Data_Tuple.Tuple(0, 0))(stats.libWarnings);
    var libErrors = Data_StrMap.fold(sumRatio)(new Data_Tuple.Tuple(0, 0))(stats.libErrors);
    var allWarnings = Data_StrMap.fold(sumRatio)(new Data_Tuple.Tuple(0, 0))(stats.allWarnings);
    var allErrors = Data_StrMap.fold(sumRatio)(new Data_Tuple.Tuple(0, 0))(stats.allErrors);
    return renderStatCols([ [ Psa_Printer.style(Ansi_Output.foreground(Ansi_Codes.Yellow.value))("Warnings") ], [ Psa_Printer.style(Ansi_Output.foreground(Ansi_Codes.Red.value))("Errors") ] ])([ renderStat(srcWarnings), renderStat(srcErrors) ])([ renderStat(libWarnings), renderStat(libErrors) ])([ renderStat(allWarnings), renderStat(allErrors) ]);
};
var renderVerboseStats = function (stats) {
    var warnings = Data_Array.sort(Data_Ord.ordString)(Data_StrMap.keys(stats.allWarnings));
    var warningLabels = Data_Functor.map(Data_Functor.functorArray)(function ($36) {
        return Data_Array.singleton(Psa_Printer.style(Ansi_Output.foreground(Ansi_Codes.Yellow.value))($36));
    })(warnings);
    var getStat = function (key) {
        return function (x) {
            return Data_Maybe.fromMaybe(new Data_Tuple.Tuple(0, 0))(Data_StrMap.lookup(key)(x));
        };
    };
    var getStats = function (ks) {
        return function (x) {
            return Data_Functor.map(Data_Functor.functorArray)(function (k) {
                return renderStat(getStat(k)(x));
            })(ks);
        };
    };
    var libWarnings = getStats(warnings)(stats.libWarnings);
    var srcWarnings = getStats(warnings)(stats.srcWarnings);
    var errors = Data_Array.sort(Data_Ord.ordString)(Data_StrMap.keys(stats.allErrors));
    var libErrors = getStats(errors)(stats.libErrors);
    var srcErrors = getStats(errors)(stats.srcErrors);
    var errorLabels = Data_Functor.map(Data_Functor.functorArray)(function ($37) {
        return Data_Array.singleton(Psa_Printer.style(Ansi_Output.foreground(Ansi_Codes.Red.value))($37));
    })(errors);
    var allWarnings = getStats(warnings)(stats.allWarnings);
    var allErrors = getStats(errors)(stats.allErrors);
    return renderStatCols(Data_Semigroup.append(Data_Semigroup.semigroupArray)(warningLabels)(errorLabels))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(srcWarnings)(srcErrors))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(libWarnings)(libErrors))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(allWarnings)(allErrors));
};
var renderPosition = function (pos) {
    return [ Psa_Printer.style(Ansi_Output.dim)(":"), Psa_Printer.plain(Data_Show.show(Data_Show.showInt)(pos.startLine)), Psa_Printer.style(Ansi_Output.dim)(":"), Psa_Printer.plain(Data_Show.show(Data_Show.showInt)(pos.startColumn)) ];
};
var renderPath = function (v) {
    if (v instanceof Psa_Types.Src) {
        return Psa_Printer.plain(v.value0);
    };
    if (v instanceof Psa_Types.Lib) {
        return Psa_Printer.plain(v.value0);
    };
    return Psa_Printer.plain("");
};
var indented = Psa_Printer.indent([ Psa_Printer.plain("  ") ]);
var emptyLine = Psa_Printer.line([ Psa_Printer.plain("") ]);
var renderSource$prime = function (pos) {
    return function (lines) {
        return Data_Semigroup.append(Psa_Printer.semigroupRow)(Psa_Printer.renderSource(pos)(lines))(emptyLine);
    };
};
var renderWrapper = function (gfx) {
    return function (total) {
        return function (index) {
            return function (v) {
                return Psa_Printer.para([ Psa_Printer.line(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ renderStatus(gfx)(total)(index)(v.error.errorCode), Psa_Printer.plain(" "), renderPath(v.path) ])(Data_Maybe.fromMaybe(Data_Monoid.mempty(Data_Monoid.monoidArray))(Data_Functor.map(Data_Maybe.functorMaybe)(renderPosition)(v.position)))), emptyLine, indented(Data_Semigroup.append(Psa_Printer.semigroupRow)(Data_Maybe.fromMaybe(Data_Monoid.mempty(Psa_Printer.monoidRow))(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(renderSource$prime)(v.position))(v.source)))(toLines(v.message))) ]);
            };
        };
    };
};
var renderError = renderWrapper(Ansi_Output.foreground(Ansi_Codes.Red.value));
var renderWarning = renderWrapper(Ansi_Output.foreground(Ansi_Codes.Yellow.value));

// | Prints output to the console.
var print = function (options) {
    return function (output) {
        var toString = Psa_Printer.render(options.ansi);
        var renderStats$prime = (function () {
            if (options.verboseStats) {
                return renderVerboseStats;
            };
            if (!options.verboseStats) {
                return renderStats;
            };
            throw new Error("Failed pattern match at Psa.Printer.Default line 43, column 18 - line 43, column 82: " + [ options.verboseStats.constructor.name ]);
        })();
        var lenWarnings = Data_Array.length(output.warnings);
        var lenErrors = Data_Array.length(output.errors);
        return function __do() {
            Psa_Util.iter_(Data_Foldable.foldableArray)(Control_Monad_Eff.applicativeEff)(output.warnings)(function (i) {
                return function (warning) {
                    return function __do() {
                        Control_Monad_Eff_Console.error(toString(renderWarning(lenWarnings)(i + 1 | 0)(warning)))();
                        return Control_Monad_Eff_Console.error("")();
                    };
                };
            })();
            Psa_Util.iter_(Data_Foldable.foldableArray)(Control_Monad_Eff.applicativeEff)(output.errors)(function (i) {
                return function (error) {
                    return function __do() {
                        Control_Monad_Eff_Console.error(toString(renderError(lenErrors)(i + 1 | 0)(error)))();
                        return Control_Monad_Eff_Console.error("")();
                    };
                };
            })();
            return Control_Monad_Eff_Console.error(toString(renderStats$prime(output.stats)))();
        };
    };
};
module.exports = {
    print: print, 
    renderError: renderError, 
    renderStats: renderStats, 
    renderVerboseStats: renderVerboseStats, 
    renderWarning: renderWarning
};
