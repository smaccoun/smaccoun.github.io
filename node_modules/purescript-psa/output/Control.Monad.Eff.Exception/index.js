// Generated by psc version 0.10.7

// | This module defines an effect, actions and handlers for working

// | with JavaScript exceptions.
"use strict";
var $foreign = require("./foreign");
var Prelude = require("../Prelude");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Data_Either = require("../Data.Either");
var Data_Maybe = require("../Data.Maybe");
var Data_Show = require("../Data.Show");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Control_Applicative = require("../Control.Applicative");
var Data_Functor = require("../Data.Functor");

// | Runs an Eff and returns eventual Exceptions as a `Left` value. If the

// | computation succeeds the result gets wrapped in a `Right`.

// |

// | For example:

// |

// | ```purescript

// | -- Notice that there is no EXCEPTION effect

// | main :: forall eff. Eff (console :: CONSOLE, fs :: FS | eff) Unit

// | main = do

// |   result <- try (readTextFile UTF8 "README.md")

// |   case result of

// |     Right lines ->

// |       Console.log ("README: \n" <> lines )

// |     Left error ->

// |       Console.error ("Couldn't open README.md. Error was: " <> show error)

// | ```
var $$try = function (action) {
    return $foreign.catchException(function ($0) {
        return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Either.Left.create($0));
    })(Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Either.Right.create)(action));
};

// | A shortcut allowing you to throw an error in one step. Defined as

// | `throwException <<< error`.
var $$throw = function ($1) {
    return $foreign.throwException($foreign.error($1));
};

// | Get the stack trace from a JavaScript error
var stack = $foreign.stackImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var showError = new Data_Show.Show($foreign.showErrorImpl);
module.exports = {
    stack: stack, 
    "throw": $$throw, 
    "try": $$try, 
    showError: showError, 
    catchException: $foreign.catchException, 
    error: $foreign.error, 
    message: $foreign.message, 
    throwException: $foreign.throwException
};
