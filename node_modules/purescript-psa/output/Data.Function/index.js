// Generated by psc version 0.10.7
"use strict";
var Control_Category = require("../Control.Category");

// | The `on` function is used to change the domain of a binary operator.

// |

// | For example, we can create a function which compares two records based on the values of their `x` properties:

// |

// | ```purescript

// | compareX :: forall r. { x :: Number | r } -> { x :: Number | r } -> Ordering

// | compareX = compare `on` _.x

// | ```
var on = function (f) {
    return function (g) {
        return function (x) {
            return function (y) {
                return f(g(x))(g(y));
            };
        };
    };
};

// | Flips the order of the arguments to a function of two arguments.

// |

// | ```purescript

// | flip const 1 2 = const 2 1 = 2

// | ```
var flip = function (f) {
    return function (b) {
        return function (a) {
            return f(a)(b);
        };
    };
};

// | Returns its first argument and ignores its second.

// |

// | ```purescript

// | const 1 "hello" = 1

// | ```
var $$const = function (a) {
    return function (v) {
        return a;
    };
};

// | Applies an argument to a function. This is primarily used as the `(#)`

// | operator, which allows parentheses to be ommitted in some cases, or as a

// | natural way to apply a value to a chain of composed functions.
var applyFlipped = function (x) {
    return function (f) {
        return f(x);
    };
};

// | Applies a function to an argument. This is primarily used as the operator

// | `($)` which allows parentheses to be omitted in some cases, or as a

// | natural way to apply a chain of composed functions to a value.
var apply = function (f) {
    return function (x) {
        return f(x);
    };
};
module.exports = {
    apply: apply, 
    applyFlipped: applyFlipped, 
    "const": $$const, 
    flip: flip, 
    on: on
};
