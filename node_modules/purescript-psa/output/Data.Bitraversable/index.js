// Generated by psc version 0.10.7
"use strict";
var Prelude = require("../Prelude");
var Data_Bifoldable = require("../Data.Bifoldable");
var Data_Bifunctor = require("../Data.Bifunctor");
var Control_Category = require("../Control.Category");

// | `Bitraversable` represents data structures with two type arguments which can be

// | traversed.

// |

// | A traversal for such a structure requires two functions, one for each type

// | argument. Type class instances should choose the appropriate function based

// | on the type of the element encountered at each point of the traversal.

// |

// | Default implementations are provided by the following functions:

// |

// | - `bitraverseDefault`

// | - `bisequenceDefault`
var Bitraversable = function (__superclass_Data$dotBifoldable$dotBifoldable_1, __superclass_Data$dotBifunctor$dotBifunctor_0, bisequence, bitraverse) {
    this["__superclass_Data.Bifoldable.Bifoldable_1"] = __superclass_Data$dotBifoldable$dotBifoldable_1;
    this["__superclass_Data.Bifunctor.Bifunctor_0"] = __superclass_Data$dotBifunctor$dotBifunctor_0;
    this.bisequence = bisequence;
    this.bitraverse = bitraverse;
};

// | `Bitraversable` represents data structures with two type arguments which can be

// | traversed.

// |

// | A traversal for such a structure requires two functions, one for each type

// | argument. Type class instances should choose the appropriate function based

// | on the type of the element encountered at each point of the traversal.

// |

// | Default implementations are provided by the following functions:

// |

// | - `bitraverseDefault`

// | - `bisequenceDefault`
var bitraverse = function (dict) {
    return dict.bitraverse;
};

// | A default implementation of `bisequence` using `bitraverse`.
var bisequenceDefault = function (dictBitraversable) {
    return function (dictApplicative) {
        return function (t) {
            return bitraverse(dictBitraversable)(dictApplicative)(Control_Category.id(Control_Category.categoryFn))(Control_Category.id(Control_Category.categoryFn))(t);
        };
    };
};

// | `Bitraversable` represents data structures with two type arguments which can be

// | traversed.

// |

// | A traversal for such a structure requires two functions, one for each type

// | argument. Type class instances should choose the appropriate function based

// | on the type of the element encountered at each point of the traversal.

// |

// | Default implementations are provided by the following functions:

// |

// | - `bitraverseDefault`

// | - `bisequenceDefault`
var bisequence = function (dict) {
    return dict.bisequence;
};

// | A default implementation of `bitraverse` using `bisequence` and `bimap`.
var bitraverseDefault = function (dictBitraversable) {
    return function (dictApplicative) {
        return function (f) {
            return function (g) {
                return function (t) {
                    return bisequence(dictBitraversable)(dictApplicative)(Data_Bifunctor.bimap(dictBitraversable["__superclass_Data.Bifunctor.Bifunctor_0"]())(f)(g)(t));
                };
            };
        };
    };
};

// | Traverse a data structure, accumulating effects and results using an `Applicative` functor.
var bifor = function (dictBitraversable) {
    return function (dictApplicative) {
        return function (t) {
            return function (f) {
                return function (g) {
                    return bitraverse(dictBitraversable)(dictApplicative)(f)(g)(t);
                };
            };
        };
    };
};
module.exports = {
    Bitraversable: Bitraversable, 
    bifor: bifor, 
    bisequence: bisequence, 
    bisequenceDefault: bisequenceDefault, 
    bitraverse: bitraverse, 
    bitraverseDefault: bitraverseDefault
};
