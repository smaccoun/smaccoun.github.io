// Generated by psc version 0.10.7

// | Wraps Javascript's `RegExp` object that enables matching strings with

// | patternes defined by regular expressions.

// | For details of the underlying implementation, see [RegExp Reference at MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp).
"use strict";
var $foreign = require("./foreign");
var Prelude = require("../Prelude");
var Data_Either = require("../Data.Either");
var Data_Maybe = require("../Data.Maybe");
var Data_String = require("../Data.String");
var Data_String_Regex_Flags = require("../Data.String.Regex.Flags");
var Data_Show = require("../Data.Show");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Function = require("../Data.Function");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var showRegex = new Data_Show.Show($foreign["showRegex'"]);

// | Returns `Just` the index of the first match of the `Regex` in the string,

// | or `Nothing` if there is no match.
var search = $foreign._search(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

// | Returns the string representation of the given `RegexFlags`.
var renderFlags = function (v) {
    return (function () {
        if (v.value0.global) {
            return "g";
        };
        if (!v.value0.global) {
            return "";
        };
        throw new Error("Failed pattern match at Data.String.Regex line 59, column 4 - line 59, column 32: " + [ v.value0.global.constructor.name ]);
    })() + ((function () {
        if (v.value0.ignoreCase) {
            return "i";
        };
        if (!v.value0.ignoreCase) {
            return "";
        };
        throw new Error("Failed pattern match at Data.String.Regex line 60, column 4 - line 60, column 36: " + [ v.value0.ignoreCase.constructor.name ]);
    })() + ((function () {
        if (v.value0.multiline) {
            return "m";
        };
        if (!v.value0.multiline) {
            return "";
        };
        throw new Error("Failed pattern match at Data.String.Regex line 61, column 4 - line 61, column 35: " + [ v.value0.multiline.constructor.name ]);
    })() + ((function () {
        if (v.value0.sticky) {
            return "y";
        };
        if (!v.value0.sticky) {
            return "";
        };
        throw new Error("Failed pattern match at Data.String.Regex line 62, column 4 - line 62, column 32: " + [ v.value0.sticky.constructor.name ]);
    })() + (function () {
        if (v.value0.unicode) {
            return "u";
        };
        if (!v.value0.unicode) {
            return "";
        };
        throw new Error("Failed pattern match at Data.String.Regex line 63, column 4 - line 63, column 33: " + [ v.value0.unicode.constructor.name ]);
    })())));
};

// | Constructs a `Regex` from a pattern string and flags. Fails with

// | `Left error` if the pattern contains a syntax error.
var regex = function (s) {
    return function (f) {
        return $foreign["regex'"](Data_Either.Left.create)(Data_Either.Right.create)(s)(renderFlags(f));
    };
};

// | Parses the string representation of `RegexFlags`.
var parseFlags = function (s) {
    return new Data_String_Regex_Flags.RegexFlags({
        global: Data_String.contains("g")(s), 
        ignoreCase: Data_String.contains("i")(s), 
        multiline: Data_String.contains("m")(s), 
        sticky: Data_String.contains("y")(s), 
        unicode: Data_String.contains("u")(s)
    });
};

// | Matches the string against the `Regex` and returns an array of matches

// | if there were any. Each match has type `Maybe String`, where `Nothing`

// | represents an unmatched optional capturing group.

// | See [reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match).
var match = $foreign._match(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

// | Returns the `RegexFlags` used to construct the given `Regex`.
var flags = function ($8) {
    return Data_String_Regex_Flags.RegexFlags.create($foreign["flags'"]($8));
};
module.exports = {
    flags: flags, 
    match: match, 
    parseFlags: parseFlags, 
    regex: regex, 
    renderFlags: renderFlags, 
    search: search, 
    showRegex: showRegex, 
    replace: $foreign.replace, 
    "replace'": $foreign["replace'"], 
    source: $foreign.source, 
    split: $foreign.split, 
    test: $foreign.test
};
