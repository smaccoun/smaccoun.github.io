// Generated by psc version 0.10.7

// | This module defines the `MonadReader` type class and its instances.
"use strict";
var Prelude = require("../Prelude");
var Control_Category = require("../Control.Category");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Control_Monad = require("../Control.Monad");
var Data_Functor = require("../Data.Functor");

// | The `MonadAsk` type class represents those monads which support a global

// | context that can be provided via the `ask` function.

// |

// | An implementation is provided for `ReaderT`, and for other monad

// | transformers defined in this library.

// |

// | Law:

// |

// | - `do { ask ; ask } = ask`
var MonadAsk = function (__superclass_Control$dotMonad$dotMonad_0, ask) {
    this["__superclass_Control.Monad.Monad_0"] = __superclass_Control$dotMonad$dotMonad_0;
    this.ask = ask;
};

// | An extension of the `MonadAsk` class that introduces a function `local f x`

// | that allows the value of the local context to be modified for the duration

// | of the execution of action `x`.

// |

// | An implementation is provided for `ReaderT`, and for other monad

// | transformers defined in this library.

// |

// | Laws in addition to the `MonadAsk` law:

// |

// | - `local f ask = f <$> ask`

// | - `local _ (pure a) = pure a`

// | - `local f (do { a <- x ; y }) = do { a <- local f x ; local f y }`
var MonadReader = function (__superclass_Control$dotMonad$dotReader$dotClass$dotMonadAsk_0, local) {
    this["__superclass_Control.Monad.Reader.Class.MonadAsk_0"] = __superclass_Control$dotMonad$dotReader$dotClass$dotMonadAsk_0;
    this.local = local;
};
var monadAskFun = new MonadAsk(function () {
    return Control_Monad.monadFn;
}, Control_Category.id(Control_Category.categoryFn));
var monadReaderFun = new MonadReader(function () {
    return monadAskFun;
}, Control_Semigroupoid.composeFlipped(Control_Semigroupoid.semigroupoidFn));

// | An extension of the `MonadAsk` class that introduces a function `local f x`

// | that allows the value of the local context to be modified for the duration

// | of the execution of action `x`.

// |

// | An implementation is provided for `ReaderT`, and for other monad

// | transformers defined in this library.

// |

// | Laws in addition to the `MonadAsk` law:

// |

// | - `local f ask = f <$> ask`

// | - `local _ (pure a) = pure a`

// | - `local f (do { a <- x ; y }) = do { a <- local f x ; local f y }`
var local = function (dict) {
    return dict.local;
};

// | The `MonadAsk` type class represents those monads which support a global

// | context that can be provided via the `ask` function.

// |

// | An implementation is provided for `ReaderT`, and for other monad

// | transformers defined in this library.

// |

// | Law:

// |

// | - `do { ask ; ask } = ask`
var ask = function (dict) {
    return dict.ask;
};

// | Projects a value from the global context in a `MonadAsk`.
var asks = function (dictMonadAsk) {
    return function (f) {
        return Data_Functor.map((((dictMonadAsk["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(f)(ask(dictMonadAsk));
    };
};
module.exports = {
    MonadAsk: MonadAsk, 
    MonadReader: MonadReader, 
    ask: ask, 
    asks: asks, 
    local: local, 
    monadAskFun: monadAskFun, 
    monadReaderFun: monadReaderFun
};
