// Generated by psc version 0.10.7
"use strict";
var Prelude = require("../Prelude");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Monad_Eff_Exception = require("../Control.Monad.Eff.Exception");
var Data_DateTime = require("../Data.DateTime");
var Data_Time_Duration = require("../Data.Time.Duration");
var Data_DateTime_Instant = require("../Data.DateTime.Instant");
var Data_Function_Uncurried = require("../Data.Function.Uncurried");
var Data_Nullable = require("../Data.Nullable");
var Data_Int = require("../Data.Int");
var Data_Maybe = require("../Data.Maybe");
var Node_Buffer = require("../Node.Buffer");
var Node_Encoding = require("../Node.Encoding");
var Node_FS = require("../Node.FS");
var Node_FS_Stats = require("../Node.FS.Stats");
var Node_Path = require("../Node.Path");
var Node_FS_Perms = require("../Node.FS.Perms");
var Node_FS_Internal = require("../Node.FS.Internal");
var Data_Function = require("../Data.Function");
var Data_Show = require("../Data.Show");
var Data_Functor = require("../Data.Functor");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_EuclideanRing = require("../Data.EuclideanRing");
var Control_Bind = require("../Control.Bind");
var fs = Node_FS_Internal.unsafeRequireFS;

// | Creates a link to an existing file.
var link = function (src) {
    return function (dst) {
        return Node_FS_Internal.mkEff(function (v) {
            return fs.linkSync(src, dst);
        });
    };
};

// | Makes a new directory with the specified permissions.
var mkdir$prime = function (file) {
    return function (perms) {
        return Node_FS_Internal.mkEff(function (v) {
            return fs.mkdirSync(file, Node_FS_Perms.permsToString(perms));
        });
    };
};

// | Makes a new directory.
var mkdir = Data_Function.flip(mkdir$prime)(Node_FS_Perms.mkPerms(Node_FS_Perms.all)(Node_FS_Perms.all)(Node_FS_Perms.all));

// | Reads the entire contents of a file returning the result as a raw buffer.
var readFile = function (file) {
    return Node_FS_Internal.mkEff(function (v) {
        return fs.readFileSync(file, {});
    });
};

// | Reads the entire contents of a text file with the specified encoding.
var readTextFile = function (encoding) {
    return function (file) {
        return Node_FS_Internal.mkEff(function (v) {
            return fs.readFileSync(file, {
                encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
            });
        });
    };
};

// | Reads the contents of a directory.
var readdir = function (file) {
    return Node_FS_Internal.mkEff(function (v) {
        return fs.readdirSync(file);
    });
};

// | Reads the value of a symlink.
var readlink = function (path) {
    return Node_FS_Internal.mkEff(function (v) {
        return fs.readlinkSync(path);
    });
};

// | Find the canonicalized absolute location for a path.
var realpath = function (path) {
    return Node_FS_Internal.mkEff(function (v) {
        return fs.realpathSync(path, {});
    });
};

// | Find the canonicalized absolute location for a path using a cache object for

// | already resolved paths.
var realpath$prime = function (path) {
    return function (cache) {
        return Node_FS_Internal.mkEff(function (v) {
            return fs.realpathSync(path, cache);
        });
    };
};

// | Renames a file.
var rename = function (oldFile) {
    return function (newFile) {
        return Node_FS_Internal.mkEff(function (v) {
            return fs.renameSync(oldFile, newFile);
        });
    };
};

// | Deletes a directory.
var rmdir = function (file) {
    return Node_FS_Internal.mkEff(function (v) {
        return fs.rmdirSync(file);
    });
};

// | Gets file statistics.
var stat = function (file) {
    return Data_Functor.map(Control_Monad_Eff.functorEff)(Node_FS_Stats.Stats.create)(Node_FS_Internal.mkEff(function (v) {
        return fs.statSync(file);
    }));
};

// | Creates a symlink.
var symlink = function (src) {
    return function (dst) {
        return function (ty) {
            return Node_FS_Internal.mkEff(function (v) {
                return fs.symlinkSync(src, dst, Node_FS.symlinkTypeToNode(ty));
            });
        };
    };
};

// | Truncates a file to the specified length.
var truncate = function (file) {
    return function (len) {
        return Node_FS_Internal.mkEff(function (v) {
            return fs.truncateSync(file, len);
        });
    };
};

// | Deletes a file.
var unlink = function (file) {
    return Node_FS_Internal.mkEff(function (v) {
        return fs.unlinkSync(file);
    });
};

// | Sets the accessed and modified times for the specified file.
var utimes = function (file) {
    return function (atime) {
        return function (mtime) {
            var toEpochMilliseconds = function ($60) {
                return Data_DateTime_Instant.unInstant(Data_DateTime_Instant.fromDateTime($60));
            };
            var ms = function (v) {
                return Data_Int.round(v);
            };
            var fromDate = function (date) {
                return ms(toEpochMilliseconds(date)) / 1000 | 0;
            };
            return Node_FS_Internal.mkEff(function (v) {
                return fs.utimesSync(file, fromDate(atime), fromDate(mtime));
            });
        };
    };
};

// | Writes a buffer to a file.
var writeFile = function (file) {
    return function (buff) {
        return Node_FS_Internal.mkEff(function (v) {
            return fs.writeFileSync(file, buff, {});
        });
    };
};

// | Writes text to a file using the specified encoding.
var writeTextFile = function (encoding) {
    return function (file) {
        return function (text) {
            return Node_FS_Internal.mkEff(function (v) {
                return fs.writeFileSync(file, text, {
                    encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
                });
            });
        };
    };
};

// | Write to a file synchronously. See the [Node documentation](http://nodejs.org/api/fs.html#fs_fs_writesync_fd_buffer_offset_length_position)

// | for details.
var fdWrite = function (fd) {
    return function (buff) {
        return function (off) {
            return function (len) {
                return function (pos) {
                    return Node_FS_Internal.mkEff(function (v) {
                        return fs.writeSync(fd, buff, off, len, Data_Nullable.toNullable(pos));
                    });
                };
            };
        };
    };
};

// | Read from a file synchronously. See the [Node documentation](http://nodejs.org/api/fs.html#fs_fs_readsync_fd_buffer_offset_length_position)

// | for details.
var fdRead = function (fd) {
    return function (buff) {
        return function (off) {
            return function (len) {
                return function (pos) {
                    return Node_FS_Internal.mkEff(function (v) {
                        return fs.readSync(fd, buff, off, len, Data_Nullable.toNullable(pos));
                    });
                };
            };
        };
    };
};

// | Open a file synchronously. See the [Node documentation](http://nodejs.org/api/fs.html#fs_fs_opensync_path_flags_mode)

// | for details.
var fdOpen = function (file) {
    return function (flags) {
        return function (mode) {
            return Node_FS_Internal.mkEff(function (v) {
                return fs.openSync(file, Node_FS.fileFlagsToNode(flags), Data_Nullable.toNullable(mode));
            });
        };
    };
};

// | Convenience function to fill the whole buffer from the current

// | file position.
var fdNext = function (fd) {
    return function (buff) {
        return function __do() {
            var v = Node_Buffer.size(buff)();
            return fdRead(fd)(buff)(0)(v)(Data_Maybe.Nothing.value)();
        };
    };
};

// | Flush a file synchronously.  See the [Node documentation](http://nodejs.org/api/fs.html#fs_fs_fsyncsync_fd)

// | for details.
var fdFlush = function (fd) {
    return Node_FS_Internal.mkEff(function (v) {
        return fs.fsyncSync(fd);
    });
};

// | Close a file synchronously. See the [Node documentation](http://nodejs.org/api/fs.html#fs_fs_closesync_fd)

// | for details.
var fdClose = function (fd) {
    return Node_FS_Internal.mkEff(function (v) {
        return fs.closeSync(fd);
    });
};

// | Convenience function to append the whole buffer to the current

// | file position.
var fdAppend = function (fd) {
    return function (buff) {
        return function __do() {
            var v = Node_Buffer.size(buff)();
            return fdWrite(fd)(buff)(0)(v)(Data_Maybe.Nothing.value)();
        };
    };
};

// | Check if the path exists.
var exists = function (file) {
    return Node_FS_Internal.mkEff(function (v) {
        return fs.existsSync(file);
    });
};

// | Changes the ownership of a file.
var chown = function (file) {
    return function (uid) {
        return function (gid) {
            return Node_FS_Internal.mkEff(function (v) {
                return fs.chownSync(file, uid, gid);
            });
        };
    };
};

// | Changes the permissions of a file.
var chmod = function (file) {
    return function (perms) {
        return Node_FS_Internal.mkEff(function (v) {
            return fs.chmodSync(file, Node_FS_Perms.permsToString(perms));
        });
    };
};

// | Appends text to a file using the specified encoding.
var appendTextFile = function (encoding) {
    return function (file) {
        return function (buff) {
            return Node_FS_Internal.mkEff(function (v) {
                return fs.appendFileSync(file, buff, {
                    encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
                });
            });
        };
    };
};

// | Appends the contents of a buffer to a file.
var appendFile = function (file) {
    return function (buff) {
        return Node_FS_Internal.mkEff(function (v) {
            return fs.appendFileSync(file, buff, {});
        });
    };
};
module.exports = {
    appendFile: appendFile, 
    appendTextFile: appendTextFile, 
    chmod: chmod, 
    chown: chown, 
    exists: exists, 
    fdAppend: fdAppend, 
    fdClose: fdClose, 
    fdFlush: fdFlush, 
    fdNext: fdNext, 
    fdOpen: fdOpen, 
    fdRead: fdRead, 
    fdWrite: fdWrite, 
    link: link, 
    mkdir: mkdir, 
    "mkdir'": mkdir$prime, 
    readFile: readFile, 
    readTextFile: readTextFile, 
    readdir: readdir, 
    readlink: readlink, 
    realpath: realpath, 
    "realpath'": realpath$prime, 
    rename: rename, 
    rmdir: rmdir, 
    stat: stat, 
    symlink: symlink, 
    truncate: truncate, 
    unlink: unlink, 
    utimes: utimes, 
    writeFile: writeFile, 
    writeTextFile: writeTextFile
};
