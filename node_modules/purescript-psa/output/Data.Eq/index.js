// Generated by psc version 0.10.7
"use strict";
var $foreign = require("./foreign");
var Data_Unit = require("../Data.Unit");
var Data_Void = require("../Data.Void");

// | The `Eq` type class represents types which support decidable equality.

// |

// | `Eq` instances should satisfy the following laws:

// |

// | - Reflexivity: `x == x = true`

// | - Symmetry: `x == y = y == x`

// | - Transitivity: if `x == y` and `y == z` then `x == z`

// |

// | **Note:** The `Number` type is not an entirely law abiding member of this

// | class due to the presence of `NaN`, since `NaN /= NaN`. Additionally,

// | computing with `Number` can result in a loss of precision, so sometimes

// | values that should be equivalent are not.
var Eq = function (eq) {
    this.eq = eq;
};
var eqVoid = new Eq(function (v) {
    return function (v1) {
        return true;
    };
});
var eqUnit = new Eq(function (v) {
    return function (v1) {
        return true;
    };
});
var eqString = new Eq($foreign.refEq);
var eqNumber = new Eq($foreign.refEq);
var eqInt = new Eq($foreign.refEq);
var eqChar = new Eq($foreign.refEq);
var eqBoolean = new Eq($foreign.refEq);

// | The `Eq` type class represents types which support decidable equality.

// |

// | `Eq` instances should satisfy the following laws:

// |

// | - Reflexivity: `x == x = true`

// | - Symmetry: `x == y = y == x`

// | - Transitivity: if `x == y` and `y == z` then `x == z`

// |

// | **Note:** The `Number` type is not an entirely law abiding member of this

// | class due to the presence of `NaN`, since `NaN /= NaN`. Additionally,

// | computing with `Number` can result in a loss of precision, so sometimes

// | values that should be equivalent are not.
var eq = function (dict) {
    return dict.eq;
};
var eqArray = function (dictEq) {
    return new Eq($foreign.eqArrayImpl(eq(dictEq)));
};

// | `notEq` tests whether one value is _not equal_ to another. Shorthand for

// | `not (eq x y)`.
var notEq = function (dictEq) {
    return function (x) {
        return function (y) {
            return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
        };
    };
};
module.exports = {
    Eq: Eq, 
    eq: eq, 
    notEq: notEq, 
    eqBoolean: eqBoolean, 
    eqInt: eqInt, 
    eqNumber: eqNumber, 
    eqChar: eqChar, 
    eqString: eqString, 
    eqUnit: eqUnit, 
    eqVoid: eqVoid, 
    eqArray: eqArray
};
