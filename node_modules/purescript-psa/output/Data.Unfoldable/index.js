// Generated by psc version 0.10.7

// | This module provides a type class for _unfoldable functors_, i.e.

// | functors which support an `unfoldr` operation.

// |

// | This allows us to unify various operations on arrays, lists,

// | sequences, etc.
"use strict";
var $foreign = require("./foreign");
var Prelude = require("../Prelude");
var Data_Maybe = require("../Data.Maybe");
var Data_Traversable = require("../Data.Traversable");
var Data_Tuple = require("../Data.Tuple");
var Partial_Unsafe = require("../Partial.Unsafe");
var Data_Ord = require("../Data.Ord");
var Data_Ring = require("../Data.Ring");
var Data_Function = require("../Data.Function");
var Data_Unit = require("../Data.Unit");
var Data_Functor = require("../Data.Functor");

// | This class identifies data structures which can be _unfolded_,

// | generalizing `unfoldr` on arrays.

// |

// | The generating function `f` in `unfoldr f` in understood as follows:

// |

// | - If `f b` is `Nothing`, then `unfoldr f b` should be empty.

// | - If `f b` is `Just (Tuple a b1)`, then `unfoldr f b` should consist of `a`

// |   appended to the result of `unfoldr f b1`.
var Unfoldable = function (unfoldr) {
    this.unfoldr = unfoldr;
};

// | This class identifies data structures which can be _unfolded_,

// | generalizing `unfoldr` on arrays.

// |

// | The generating function `f` in `unfoldr f` in understood as follows:

// |

// | - If `f b` is `Nothing`, then `unfoldr f b` should be empty.

// | - If `f b` is `Just (Tuple a b1)`, then `unfoldr f b` should consist of `a`

// |   appended to the result of `unfoldr f b1`.
var unfoldr = function (dict) {
    return dict.unfoldr;
};
var unfoldableArray = new Unfoldable($foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));

// | Replicate a value some natural number of times.

// | For example:

// |

// | ~~~ purescript

// | replicate 2 "foo" == ["foo", "foo"] :: Array String

// | ~~~
var replicate = function (dictUnfoldable) {
    return function (n) {
        return function (v) {
            var step = function (i) {
                var $8 = i <= 0;
                if ($8) {
                    return Data_Maybe.Nothing.value;
                };
                if (!$8) {
                    return new Data_Maybe.Just(new Data_Tuple.Tuple(v, i - 1 | 0));
                };
                throw new Error("Failed pattern match at Data.Unfoldable line 59, column 7 - line 60, column 34: " + [ $8.constructor.name ]);
            };
            return unfoldr(dictUnfoldable)(step)(n);
        };
    };
};

// | Perform an Applicative action `n` times, and accumulate all the results.
var replicateA = function (dictApplicative) {
    return function (dictUnfoldable) {
        return function (dictTraversable) {
            return function (n) {
                return function (m) {
                    return Data_Traversable.sequence(dictTraversable)(dictApplicative)(replicate(dictUnfoldable)(n)(m));
                };
            };
        };
    };
};

// | Contain a single value.

// | For example:

// |

// | ~~~ purescript

// | singleton "foo" == ["foo"] :: Array String

// | ~~~
var singleton = function (dictUnfoldable) {
    return replicate(dictUnfoldable)(1);
};

// | The container with no elements - unfolded with zero iterations.

// | For example:

// |

// | ~~~ purescript

// | none == [] :: forall a. Array a

// | ~~~
var none = function (dictUnfoldable) {
    return unfoldr(dictUnfoldable)(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Unit.unit);
};

// | Convert a Maybe to any Unfoldable like lists and arrays.
var fromMaybe = function (dictUnfoldable) {
    return unfoldr(dictUnfoldable)(function (b) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Data_Tuple.Tuple.create)(Data_Maybe.Nothing.value))(b);
    });
};
module.exports = {
    Unfoldable: Unfoldable, 
    fromMaybe: fromMaybe, 
    none: none, 
    replicate: replicate, 
    replicateA: replicateA, 
    singleton: singleton, 
    unfoldr: unfoldr, 
    unfoldableArray: unfoldableArray
};
