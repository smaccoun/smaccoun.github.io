// Generated by psc version 0.10.7
"use strict";
var $foreign = require("./foreign");
var Data_Unit = require("../Data.Unit");
var Data_Void = require("../Data.Void");

// | The `Semigroup` type class identifies an associative operation on a type.

// |

// | Instances are required to satisfy the following law:

// |

// | - Associativity: `(x <> y) <> z = x <> (y <> z)`

// |

// | One example of a `Semigroup` is `String`, with `(<>)` defined as string

// | concatenation.
var Semigroup = function (append) {
    this.append = append;
};
var semigroupVoid = new Semigroup(function (v) {
    return Data_Void.absurd;
});
var semigroupUnit = new Semigroup(function (v) {
    return function (v1) {
        return Data_Unit.unit;
    };
});
var semigroupString = new Semigroup($foreign.concatString);
var semigroupArray = new Semigroup($foreign.concatArray);

// | The `Semigroup` type class identifies an associative operation on a type.

// |

// | Instances are required to satisfy the following law:

// |

// | - Associativity: `(x <> y) <> z = x <> (y <> z)`

// |

// | One example of a `Semigroup` is `String`, with `(<>)` defined as string

// | concatenation.
var append = function (dict) {
    return dict.append;
};
var semigroupFn = function (dictSemigroup) {
    return new Semigroup(function (f) {
        return function (g) {
            return function (x) {
                return append(dictSemigroup)(f(x))(g(x));
            };
        };
    });
};
module.exports = {
    Semigroup: Semigroup, 
    append: append, 
    semigroupString: semigroupString, 
    semigroupUnit: semigroupUnit, 
    semigroupVoid: semigroupVoid, 
    semigroupFn: semigroupFn, 
    semigroupArray: semigroupArray
};
