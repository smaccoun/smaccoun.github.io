// Generated by psc version 0.10.7
"use strict";
var $foreign = require("./foreign");
var Data_Boolean = require("../Data.Boolean");
var Data_BooleanAlgebra = require("../Data.BooleanAlgebra");
var Data_Bounded = require("../Data.Bounded");
var Data_Eq = require("../Data.Eq");
var Data_Function = require("../Data.Function");
var Data_Int_Bits = require("../Data.Int.Bits");
var Data_Maybe = require("../Data.Maybe");
var Data_Ord = require("../Data.Ord");
var $$Math = require("../Math");
var Partial_Unsafe = require("../Partial.Unsafe");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Control_Semigroupoid = require("../Control.Semigroupoid");

// | The number of unique digits (including zero) used to represent integers in

// | a specific base.
var Radix = function (x) {
    return x;
};

// | Create a `Radix` from a number between 2 and 36.
var radix = function (n) {
    if (n >= 2 && n <= 36) {
        return new Data_Maybe.Just(n);
    };
    if (Data_Boolean.otherwise) {
        return Data_Maybe.Nothing.value;
    };
    throw new Error("Failed pattern match at Data.Int line 125, column 1 - line 126, column 38: " + [ n.constructor.name ]);
};

// | The negation of `even`.

// |

// | ``` purescript

// | odd 0 == false

// | odd 1 == false

// | ```
var odd = function (x) {
    return (x & 1) !== 0;
};

// | The base-8 system.
var octal = 8;

// | The base-16 system.
var hexadecimal = 16;

// | Like `fromString`, but the integer can be specified in a different base.

// |

// | Example:

// | ``` purs

// | fromStringAs binary      "100" == Just 4

// | fromStringAs hexadecimal "ff"  == Just 255

// | ```
var fromStringAs = $foreign.fromStringAsImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

// | Reads an `Int` from a `String` value. The number must parse as an integer

// | and fall within the valid range of values for the `Int` type, otherwise

// | `Nothing` is returned.
var fromString = fromStringAs(10);

// | Creates an `Int` from a `Number` value. The number must already be an

// | integer and fall within the valid range of values for the `Int` type

// | otherwise `Nothing` is returned.
var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

// | Convert an integral `Number` to an `Int`, by clamping to the `Int` range.

// | This function will throw an error at runtime if the argument is

// | non-integral.
var unsafeClamp = function (x) {
    if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
        return Data_Bounded.top(Data_Bounded.boundedInt);
    };
    if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
        return Data_Bounded.bottom(Data_Bounded.boundedInt);
    };
    if (Data_Boolean.otherwise) {
        return Data_Maybe.fromJust()(fromNumber(x));
    };
    throw new Error("Failed pattern match at Data.Int line 66, column 1 - line 69, column 56: " + [ x.constructor.name ]);
};

// | Convert a `Number` to an `Int`, by taking the nearest integer to the

// | argument. Values outside the `Int` range are clamped.
var round = function ($3) {
    return unsafeClamp($$Math.round($3));
};

// | Convert a `Number` to an `Int`, by taking the closest integer equal to or

// | less than the argument. Values outside the `Int` range are clamped.
var floor = function ($4) {
    return unsafeClamp($$Math.floor($4));
};

// | Returns whether an `Int` is an even number.

// |

// | ``` purescript

// | even 0 == true

// | even 1 == false

// | ```
var even = function (x) {
    return (x & 1) === 0;
};

// | The base-10 system.
var decimal = 10;

// | Convert a `Number` to an `Int`, by taking the closest integer equal to or

// | greater than the argument. Values outside the `Int` range are clamped.
var ceil = function ($5) {
    return unsafeClamp($$Math.ceil($5));
};

// | The base-2 system.
var binary = 2;

// | The base-36 system.
var base36 = 36;
module.exports = {
    base36: base36, 
    binary: binary, 
    ceil: ceil, 
    decimal: decimal, 
    even: even, 
    floor: floor, 
    fromNumber: fromNumber, 
    fromString: fromString, 
    fromStringAs: fromStringAs, 
    hexadecimal: hexadecimal, 
    octal: octal, 
    odd: odd, 
    radix: radix, 
    round: round, 
    pow: $foreign.pow, 
    toNumber: $foreign.toNumber, 
    toStringAs: $foreign.toStringAs
};
