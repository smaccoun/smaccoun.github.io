// Generated by psc version 0.10.7
"use strict";
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Bind = require("../Control.Bind");
var Data_Functor = require("../Data.Functor");
var Data_Unit = require("../Data.Unit");

// | The `Monad` type class combines the operations of the `Bind` and

// | `Applicative` type classes. Therefore, `Monad` instances represent type

// | constructors which support sequential composition, and also lifting of

// | functions of arbitrary arity.

// |

// | Instances must satisfy the following laws in addition to the

// | `Applicative` and `Bind` laws:

// |

// | - Left Identity: `pure x >>= f = f x`

// | - Right Identity: `x >>= pure = x`
var Monad = function (__superclass_Control$dotApplicative$dotApplicative_0, __superclass_Control$dotBind$dotBind_1) {
    this["__superclass_Control.Applicative.Applicative_0"] = __superclass_Control$dotApplicative$dotApplicative_0;
    this["__superclass_Control.Bind.Bind_1"] = __superclass_Control$dotBind$dotBind_1;
};

// | Perform a monadic action when a condition is true, where the conditional

// | value is also in a monadic context.
var whenM = function (dictMonad) {
    return function (mb) {
        return function (m) {
            return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(mb)(function (v) {
                return Control_Applicative.when(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(v)(m);
            });
        };
    };
};

// | Perform a monadic action unless a condition is true, where the conditional

// | value is also in a monadic context.
var unlessM = function (dictMonad) {
    return function (mb) {
        return function (m) {
            return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(mb)(function (v) {
                return Control_Applicative.unless(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(v)(m);
            });
        };
    };
};
var monadFn = new Monad(function () {
    return Control_Applicative.applicativeFn;
}, function () {
    return Control_Bind.bindFn;
});
var monadArray = new Monad(function () {
    return Control_Applicative.applicativeArray;
}, function () {
    return Control_Bind.bindArray;
});

// | `liftM1` provides a default implementation of `(<$>)` for any

// | [`Monad`](#monad), without using `(<$>)` as provided by the

// | [`Functor`](#functor)-[`Monad`](#monad) superclass relationship.

// |

// | `liftM1` can therefore be used to write [`Functor`](#functor) instances

// | as follows:

// |

// | ```purescript

// | instance functorF :: Functor F where

// |   map = liftM1

// | ```
var liftM1 = function (dictMonad) {
    return function (f) {
        return function (a) {
            return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(a)(function (v) {
                return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(f(v));
            });
        };
    };
};

// | `ap` provides a default implementation of `(<*>)` for any

// | [`Monad`](#monad), without using `(<*>)` as provided by the

// | [`Apply`](#apply)-[`Monad`](#monad) superclass relationship.

// |

// | `ap` can therefore be used to write [`Apply`](#apply) instances as

// | follows:

// |

// | ```purescript

// | instance applyF :: Apply F where

// |   apply = ap

// | ```
var ap = function (dictMonad) {
    return function (f) {
        return function (a) {
            return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(f)(function (v) {
                return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(a)(function (v1) {
                    return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(v(v1));
                });
            });
        };
    };
};
module.exports = {
    Monad: Monad, 
    ap: ap, 
    liftM1: liftM1, 
    unlessM: unlessM, 
    whenM: whenM, 
    monadFn: monadFn, 
    monadArray: monadArray
};
