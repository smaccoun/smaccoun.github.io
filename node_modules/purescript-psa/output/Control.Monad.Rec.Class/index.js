// Generated by psc version 0.10.7
"use strict";
var Prelude = require("../Prelude");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Monad_Eff_Unsafe = require("../Control.Monad.Eff.Unsafe");
var Control_Monad_ST = require("../Control.Monad.ST");
var Data_Either = require("../Data.Either");
var Data_Identity = require("../Data.Identity");
var Data_Bifunctor = require("../Data.Bifunctor");
var Partial_Unsafe = require("../Partial.Unsafe");
var Data_Functor = require("../Data.Functor");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Control_Bind = require("../Control.Bind");
var Control_Applicative = require("../Control.Applicative");
var Data_Unit = require("../Data.Unit");

// | The result of a computation: either `Loop` containing the updated

// | accumulator, or `Done` containing the final result of the computation.
var Loop = (function () {
    function Loop(value0) {
        this.value0 = value0;
    };
    Loop.create = function (value0) {
        return new Loop(value0);
    };
    return Loop;
})();

// | The result of a computation: either `Loop` containing the updated

// | accumulator, or `Done` containing the final result of the computation.
var Done = (function () {
    function Done(value0) {
        this.value0 = value0;
    };
    Done.create = function (value0) {
        return new Done(value0);
    };
    return Done;
})();

// | This type class captures those monads which support tail recursion in

// | constant stack space.

// |

// | The `tailRecM` function takes a step function, and applies that step

// | function recursively until a pure value of type `b` is found.

// |

// | Instances are provided for standard monad transformers.

// |

// | For example:

// |

// | ```purescript

// | loopWriter :: Number -> WriterT Sum (Eff (trace :: Trace)) Unit

// | loopWriter n = tailRecM go n

// |   where

// |   go 0 = do

// |     lift $ trace "Done!"

// |     pure (Done unit)

// |   go n = do

// |     tell $ Sum n

// |     pure (Loop (n - 1))

// | ```
var MonadRec = function (__superclass_Control$dotMonad$dotMonad_0, tailRecM) {
    this["__superclass_Control.Monad.Monad_0"] = __superclass_Control$dotMonad$dotMonad_0;
    this.tailRecM = tailRecM;
};

// | This type class captures those monads which support tail recursion in

// | constant stack space.

// |

// | The `tailRecM` function takes a step function, and applies that step

// | function recursively until a pure value of type `b` is found.

// |

// | Instances are provided for standard monad transformers.

// |

// | For example:

// |

// | ```purescript

// | loopWriter :: Number -> WriterT Sum (Eff (trace :: Trace)) Unit

// | loopWriter n = tailRecM go n

// |   where

// |   go 0 = do

// |     lift $ trace "Done!"

// |     pure (Done unit)

// |   go n = do

// |     tell $ Sum n

// |     pure (Loop (n - 1))

// | ```
var tailRecM = function (dict) {
    return dict.tailRecM;
};

// | Create a tail-recursive function of two arguments which uses constant stack space.
var tailRecM2 = function (dictMonadRec) {
    return function (f) {
        return function (a) {
            return function (b) {
                return tailRecM(dictMonadRec)(function (o) {
                    return f(o.a)(o.b);
                })({
                    a: a, 
                    b: b
                });
            };
        };
    };
};

// | Create a tail-recursive function of three arguments which uses constant stack space.
var tailRecM3 = function (dictMonadRec) {
    return function (f) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return tailRecM(dictMonadRec)(function (o) {
                        return f(o.a)(o.b)(o.c);
                    })({
                        a: a, 
                        b: b, 
                        c: c
                    });
                };
            };
        };
    };
};
var tailRecEff = function (f) {
    return function (a) {
        var fromDone = function (v) {
            var __unused = function (dictPartial1) {
                return function ($dollar15) {
                    return $dollar15;
                };
            };
            return __unused()((function () {
                if (v instanceof Done) {
                    return v.value0;
                };
                throw new Error("Failed pattern match at Control.Monad.Rec.Class line 130, column 28 - line 130, column 42: " + [ v.constructor.name ]);
            })());
        };
        var f$prime = function ($47) {
            return Control_Monad_Eff_Unsafe.unsafeCoerceEff(f($47));
        };
        return function __do() {
            var v = f$prime(a)();
            var v1 = {
                value: v
            };
            (function () {
                while (!(function __do() {
                    var v2 = v1.value;
                    if (v2 instanceof Loop) {
                        var v3 = f$prime(v2.value0)();
                        v1.value = v3;
                        return false;
                    };
                    if (v2 instanceof Done) {
                        return true;
                    };
                    throw new Error("Failed pattern match at Control.Monad.Rec.Class line 119, column 5 - line 124, column 26: " + [ v2.constructor.name ]);
                })()) {

                };
                return {};
            })();
            return Data_Functor.map(Control_Monad_Eff.functorEff)(fromDone)(Control_Monad_ST.readSTRef(v1))();
        };
    };
};

// | Create a pure tail-recursive function of one argument

// |

// | For example:

// |

// | ```purescript

// | pow :: Number -> Number -> Number

// | pow n p = tailRec go { accum: 1, power: p }

// |   where

// |   go :: _ -> Step _ Number

// |   go { accum: acc, power: 0 } = Done acc

// |   go { accum: acc, power: p } = Loop { accum: acc * n, power: p - 1 }

// | ```
var tailRec = function (f) {
    var go = function (__copy_v) {
        var v = __copy_v;
        tco: while (true) {
            if (v instanceof Loop) {
                var __tco_v = f(v.value0);
                v = __tco_v;
                continue tco;
            };
            if (v instanceof Done) {
                return v.value0;
            };
            throw new Error("Failed pattern match at Control.Monad.Rec.Class line 93, column 1 - line 96, column 18: " + [ v.constructor.name ]);
        };
    };
    return function ($48) {
        return go(f($48));
    };
};
var monadRecIdentity = new MonadRec(function () {
    return Data_Identity.monadIdentity;
}, function (f) {
    var runIdentity = function (v) {
        return v;
    };
    return function ($49) {
        return Data_Identity.Identity(tailRec(function ($50) {
            return runIdentity(f($50));
        })($49));
    };
});
var monadRecEither = new MonadRec(function () {
    return Data_Either.monadEither;
}, function (f) {
    return function (a0) {
        var g = function (v) {
            if (v instanceof Data_Either.Left) {
                return new Done(new Data_Either.Left(v.value0));
            };
            if (v instanceof Data_Either.Right && v.value0 instanceof Loop) {
                return new Loop(f(v.value0.value0));
            };
            if (v instanceof Data_Either.Right && v.value0 instanceof Done) {
                return new Done(new Data_Either.Right(v.value0.value0));
            };
            throw new Error("Failed pattern match at Control.Monad.Rec.Class line 108, column 7 - line 108, column 33: " + [ v.constructor.name ]);
        };
        return tailRec(g)(f(a0));
    };
});
var monadRecEff = new MonadRec(function () {
    return Control_Monad_Eff.monadEff;
}, tailRecEff);
var functorStep = new Data_Functor.Functor(function (f) {
    return function (v) {
        if (v instanceof Loop) {
            return new Loop(v.value0);
        };
        if (v instanceof Done) {
            return new Done(f(v.value0));
        };
        throw new Error("Failed pattern match at Control.Monad.Rec.Class line 28, column 3 - line 28, column 26: " + [ f.constructor.name, v.constructor.name ]);
    };
});

// | `forever` runs an action indefinitely, using the `MonadRec` instance to

// | ensure constant stack usage.

// |

// | For example:

// |

// | ```purescript

// | main = forever $ trace "Hello, World!"

// | ```
var forever = function (dictMonadRec) {
    return function (ma) {
        return tailRecM(dictMonadRec)(function (u) {
            return Data_Functor.voidRight((((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(new Loop(u))(ma);
        })(Data_Unit.unit);
    };
};
var bifunctorStep = new Data_Bifunctor.Bifunctor(function (v) {
    return function (v1) {
        return function (v2) {
            if (v2 instanceof Loop) {
                return new Loop(v(v2.value0));
            };
            if (v2 instanceof Done) {
                return new Done(v1(v2.value0));
            };
            throw new Error("Failed pattern match at Control.Monad.Rec.Class line 32, column 3 - line 32, column 34: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
        };
    };
});
module.exports = {
    Loop: Loop, 
    Done: Done, 
    MonadRec: MonadRec, 
    forever: forever, 
    tailRec: tailRec, 
    tailRecM: tailRecM, 
    tailRecM2: tailRecM2, 
    tailRecM3: tailRecM3, 
    functorStep: functorStep, 
    bifunctorStep: bifunctorStep, 
    monadRecIdentity: monadRecIdentity, 
    monadRecEff: monadRecEff, 
    monadRecEither: monadRecEither
};
