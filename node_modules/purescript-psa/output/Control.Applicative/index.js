// Generated by psc version 0.10.7
"use strict";
var Control_Apply = require("../Control.Apply");
var Data_Functor = require("../Data.Functor");
var Data_Unit = require("../Data.Unit");

// | The `Applicative` type class extends the [`Apply`](#apply) type class

// | with a `pure` function, which can be used to create values of type `f a`

// | from values of type `a`.

// |

// | Where [`Apply`](#apply) provides the ability to lift functions of two or

// | more arguments to functions whose arguments are wrapped using `f`, and

// | [`Functor`](#functor) provides the ability to lift functions of one

// | argument, `pure` can be seen as the function which lifts functions of

// | _zero_ arguments. That is, `Applicative` functors support a lifting

// | operation for any number of function arguments.

// |

// | Instances must satisfy the following laws in addition to the `Apply`

// | laws:

// |

// | - Identity: `(pure id) <*> v = v`

// | - Composition: `(pure <<<) <*> f <*> g <*> h = f <*> (g <*> h)`

// | - Homomorphism: `(pure f) <*> (pure x) = pure (f x)`

// | - Interchange: `u <*> (pure y) = (pure ($ y)) <*> u`
var Applicative = function (__superclass_Control$dotApply$dotApply_0, pure) {
    this["__superclass_Control.Apply.Apply_0"] = __superclass_Control$dotApply$dotApply_0;
    this.pure = pure;
};

// | The `Applicative` type class extends the [`Apply`](#apply) type class

// | with a `pure` function, which can be used to create values of type `f a`

// | from values of type `a`.

// |

// | Where [`Apply`](#apply) provides the ability to lift functions of two or

// | more arguments to functions whose arguments are wrapped using `f`, and

// | [`Functor`](#functor) provides the ability to lift functions of one

// | argument, `pure` can be seen as the function which lifts functions of

// | _zero_ arguments. That is, `Applicative` functors support a lifting

// | operation for any number of function arguments.

// |

// | Instances must satisfy the following laws in addition to the `Apply`

// | laws:

// |

// | - Identity: `(pure id) <*> v = v`

// | - Composition: `(pure <<<) <*> f <*> g <*> h = f <*> (g <*> h)`

// | - Homomorphism: `(pure f) <*> (pure x) = pure (f x)`

// | - Interchange: `u <*> (pure y) = (pure ($ y)) <*> u`
var pure = function (dict) {
    return dict.pure;
};

// | Perform a applicative action unless a condition is true.
var unless = function (dictApplicative) {
    return function (v) {
        return function (v1) {
            if (!v) {
                return v1;
            };
            if (v) {
                return pure(dictApplicative)(Data_Unit.unit);
            };
            throw new Error("Failed pattern match at Control.Applicative line 63, column 1 - line 63, column 19: " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
};

// | Perform a applicative action when a condition is true.
var when = function (dictApplicative) {
    return function (v) {
        return function (v1) {
            if (v) {
                return v1;
            };
            if (!v) {
                return pure(dictApplicative)(Data_Unit.unit);
            };
            throw new Error("Failed pattern match at Control.Applicative line 58, column 1 - line 58, column 16: " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
};

// | `liftA1` provides a default implementation of `(<$>)` for any

// | [`Applicative`](#applicative) functor, without using `(<$>)` as provided

// | by the [`Functor`](#functor)-[`Applicative`](#applicative) superclass

// | relationship.

// |

// | `liftA1` can therefore be used to write [`Functor`](#functor) instances

// | as follows:

// |

// | ```purescript

// | instance functorF :: Functor F where

// |   map = liftA1

// | ```
var liftA1 = function (dictApplicative) {
    return function (f) {
        return function (a) {
            return Control_Apply.apply(dictApplicative["__superclass_Control.Apply.Apply_0"]())(pure(dictApplicative)(f))(a);
        };
    };
};
var applicativeFn = new Applicative(function () {
    return Control_Apply.applyFn;
}, function (x) {
    return function (v) {
        return x;
    };
});
var applicativeArray = new Applicative(function () {
    return Control_Apply.applyArray;
}, function (x) {
    return [ x ];
});
module.exports = {
    Applicative: Applicative, 
    liftA1: liftA1, 
    pure: pure, 
    unless: unless, 
    when: when, 
    applicativeFn: applicativeFn, 
    applicativeArray: applicativeArray
};
