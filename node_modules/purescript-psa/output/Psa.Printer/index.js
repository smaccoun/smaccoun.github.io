// Generated by psc version 0.10.7
"use strict";
var Prelude = require("../Prelude");
var Ansi_Output = require("../Ansi.Output");
var Ansi_Codes = require("../Ansi.Codes");
var Data_Monoid = require("../Data.Monoid");
var Data_Array = require("../Data.Array");
var Data_String = require("../Data.String");
var Data_Tuple = require("../Data.Tuple");
var Psa_Types = require("../Psa.Types");
var Psa_Util = require("../Psa.Util");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Functor = require("../Data.Functor");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Function = require("../Data.Function");
var Data_Ring = require("../Data.Ring");
var Data_Show = require("../Data.Show");
var Data_Semiring = require("../Data.Semiring");
var Data_Ord = require("../Data.Ord");
var Line = (function () {
    function Line(value0) {
        this.value0 = value0;
    };
    Line.create = function (value0) {
        return new Line(value0);
    };
    return Line;
})();
var Indent = (function () {
    function Indent(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Indent.create = function (value0) {
        return function (value1) {
            return new Indent(value0, value1);
        };
    };
    return Indent;
})();
var Para = (function () {
    function Para(value0) {
        this.value0 = value0;
    };
    Para.create = function (value0) {
        return new Para(value0);
    };
    return Para;
})();
var Plain = (function () {
    function Plain(value0) {
        this.value0 = value0;
    };
    Plain.create = function (value0) {
        return new Plain(value0);
    };
    return Plain;
})();
var Style = (function () {
    function Style(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Style.create = function (value0) {
        return function (value1) {
            return new Style(value0, value1);
        };
    };
    return Style;
})();
var style = Style.create;
var semigroupRow = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        if (v instanceof Line && v1 instanceof Para) {
            return new Para(Data_Array.cons(v)(v1.value0));
        };
        if (v instanceof Indent && v1 instanceof Para) {
            return new Para(Data_Array.cons(v)(v1.value0));
        };
        if (v instanceof Para && v1 instanceof Line) {
            return new Para(Data_Array.snoc(v.value0)(v1));
        };
        if (v instanceof Para && v1 instanceof Indent) {
            return new Para(Data_Array.snoc(v.value0)(v1));
        };
        if (v instanceof Para && v1 instanceof Para) {
            return new Para(Data_Semigroup.append(Data_Semigroup.semigroupArray)(v.value0)(v1.value0));
        };
        return new Para([ v, v1 ]);
    };
});
var renderRow = function (f) {
    var go = function (ind) {
        return function (v) {
            if (v instanceof Line) {
                return ind + f(v.value0);
            };
            if (v instanceof Para) {
                return Data_String.joinWith("\x0a")(Data_Functor.map(Data_Functor.functorArray)(go(ind))(v.value0));
            };
            if (v instanceof Indent) {
                return go(ind + f(v.value0))(v.value1);
            };
            throw new Error("Failed pattern match at Psa.Printer line 72, column 1 - line 75, column 44: " + [ ind.constructor.name, v.constructor.name ]);
        };
    };
    return go("");
};
var renderAnsi = function (v) {
    return function (v1) {
        if (!v && v1 instanceof Plain) {
            return v1.value0;
        };
        if (!v && v1 instanceof Style) {
            return v1.value1;
        };
        if (v && v1 instanceof Plain) {
            return v1.value0;
        };
        if (v && v1 instanceof Style) {
            return Ansi_Codes.escapeCodeToString(new Ansi_Codes.Graphics(v1.value0)) + (v1.value1 + Ansi_Codes.escapeCodeToString(new Ansi_Codes.Graphics([ Ansi_Codes.Reset.value ])));
        };
        throw new Error("Failed pattern match at Psa.Printer line 78, column 1 - line 78, column 33: " + [ v.constructor.name, v1.constructor.name ]);
    };
};
var render = function (ansi) {
    return renderRow(function ($41) {
        return Data_String.joinWith("")(Data_Functor.map(Data_Functor.functorArray)(renderAnsi(ansi))($41));
    });
};
var plain = Plain.create;
var renderErrorRange = function (start) {
    return function (len) {
        return [ plain(Psa_Util.replicate(Data_Monoid.monoidString)(start - 1 | 0)(" ")), style(Ansi_Output.foreground(Ansi_Codes.Red.value))(Psa_Util.replicate(Data_Monoid.monoidString)(len)("^")) ];
    };
};
var renderErrorTick = function (start) {
    return function ($$char) {
        return [ plain(Psa_Util.replicate(Data_Monoid.monoidString)(start - 1 | 0)(" ")), style(Ansi_Output.foreground(Ansi_Codes.Red.value))($$char) ];
    };
};
var sourceLine = function (gutter) {
    return function (sep) {
        return function (num) {
            return function (code) {
                return [ style(Ansi_Output.dim)(Psa_Util.padLeft(gutter)(Data_Show.show(Data_Show.showInt)(num)) + sep), plain(code) ];
            };
        };
    };
};
var para = Para.create;
var monoidRow = new Data_Monoid.Monoid(function () {
    return semigroupRow;
}, new Para([  ]));
var line = Line.create;
var renderAnnotation = function (offset) {
    return function (pos) {
        return function (lines) {
            return para((function () {
                if (lines.length === 1) {
                    return [ line(lines[0]), line(renderErrorRange(pos.startColumn + offset | 0)(pos.endColumn - pos.startColumn | 0)) ];
                };
                return [ line(renderErrorTick(pos.startColumn + offset | 0)("v")), para(Data_Functor.map(Data_Functor.functorArray)(line)(lines)), line(renderErrorTick((pos.endColumn + offset | 0) - 1 | 0)("^")) ];
            })());
        };
    };
};
var renderSource = function (pos) {
    return function (lines) {
        var lineNums = Data_Array.range(pos.startLine)(pos.endLine);
        var gutter = Data_String.length(Data_Show.show(Data_Show.showInt)(pos.endLine));
        var source = Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.uncurry(sourceLine(gutter)("  ")))(Data_Array.zip(lineNums)(lines));
        var source$prime = (function () {
            var $36 = Data_Array.length(source) > 7;
            if ($36) {
                return Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.take(3)(source))(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ [ plain(Psa_Util.replicate(Data_Monoid.monoidString)(gutter + 2 | 0)(" ")), style(Ansi_Output.dim)("...") ] ])(Data_Array.drop(Data_Array.length(source) - 3 | 0)(source)));
            };
            if (!$36) {
                return source;
            };
            throw new Error("Failed pattern match at Psa.Printer line 91, column 5 - line 95, column 18: " + [ $36.constructor.name ]);
        })();
        return renderAnnotation(gutter + 2 | 0)(pos)(source$prime);
    };
};
var indent = Indent.create;
var ansiLength = function (v) {
    if (v instanceof Plain) {
        return Data_String.length(v.value0);
    };
    if (v instanceof Style) {
        return Data_String.length(v.value1);
    };
    throw new Error("Failed pattern match at Psa.Printer line 65, column 1 - line 65, column 38: " + [ v.constructor.name ]);
};
module.exports = {
    ansiLength: ansiLength, 
    indent: indent, 
    line: line, 
    para: para, 
    plain: plain, 
    render: render, 
    renderAnsi: renderAnsi, 
    renderRow: renderRow, 
    renderSource: renderSource, 
    style: style, 
    semigroupRow: semigroupRow, 
    monoidRow: monoidRow
};
