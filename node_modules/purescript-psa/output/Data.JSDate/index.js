// Generated by psc version 0.10.7

// | A module providing a type and operations for the native JavaScript `Date`

// | object.

// |

// | The `JSDate` type and associated functions are provided for interop

// | purposes with JavaScript, but for working with dates in PureScript it is

// | recommended that `DateTime` representation is used instead - `DateTime`

// | offers greater type safety, a more PureScript-friendly interface, and has

// | a `Generic` instance.
"use strict";
var $foreign = require("./foreign");
var Prelude = require("../Prelude");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Monad_Eff_Exception = require("../Control.Monad.Eff.Exception");
var Data_Date = require("../Data.Date");
var Data_DateTime = require("../Data.DateTime");
var Data_DateTime_Instant = require("../Data.DateTime.Instant");
var Data_Enum = require("../Data.Enum");
var Data_Foreign = require("../Data.Foreign");
var Data_Foreign_Class = require("../Data.Foreign.Class");
var Data_Function_Uncurried = require("../Data.Function.Uncurried");
var Data_Int = require("../Data.Int");
var Data_Maybe = require("../Data.Maybe");
var Data_Time = require("../Data.Time");
var Data_Time_Duration = require("../Data.Time.Duration");
var Control_Bind = require("../Control.Bind");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Functor = require("../Data.Functor");
var Data_Date_Component = require("../Data.Date.Component");
var Data_Ring = require("../Data.Ring");
var Data_Time_Component = require("../Data.Time.Component");

// | Returns the date as a string using the UTC timezone.
var toUTCString = function (dt) {
    return $foreign.dateMethod("toUTCString", dt);
};

// | Returns the time portion of a date value as a human-readable string.
var toTimeString = function (dt) {
    return $foreign.dateMethod("toTimeString", dt);
};

// | Returns a string representing for a date value.
var toString = function (dt) {
    return $foreign.dateMethod("toString", dt);
};

// | Attempts to construct an `Instant` for a `JSDate`. `Nothing` is returned

// | only when the date value is an invalid date.
var toInstant = Control_Bind.composeKleisliFlipped(Data_Maybe.bindMaybe)(function ($4) {
    return Data_DateTime_Instant.instant(Data_Time_Duration.Milliseconds($4));
})($foreign.toInstantImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value));

// | Converts a date value to an ISO 8601 Extended format date string.
var toISOString = function (dt) {
    return $foreign.dateMethodEff("toISOString", dt);
};

// | Attempts to construct a `DateTime` value for a `JSDate`. `Nothing` is

// | returned only when the date value is an invalid date.
var toDateTime = Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_DateTime_Instant.toDateTime))(toInstant);

// | Returns the date portion of a date value as a human-readable string.
var toDateString = function (dt) {
    return $foreign.dateMethod("toDateString", dt);
};

// | Attempts to construct a `Date` value for a `JSDate`, ignoring any time

// | component of the `JSDate`. `Nothing` is returned only when the date value

// | is an invalid date.
var toDate = Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_DateTime.date))(toDateTime);
var isForeignJSDate = new Data_Foreign_Class.IsForeign(Data_Foreign.unsafeReadTagged("Date"));

// | Returns the seconds for a date, according to UTC.
var getUTCSeconds = function (dt) {
    return $foreign.dateMethod("getUTCSeconds", dt);
};

// | Returns the month for a date, according to UTC.
var getUTCMonth = function (dt) {
    return $foreign.dateMethod("getUTCMonth", dt);
};

// | Returns the minutes for a date, according to UTC.
var getUTCMinutes = function (dt) {
    return $foreign.dateMethod("getUTCMinutes", dt);
};

// | Returns the milliseconds for a date, according to UTC.
var getUTCMilliseconds = function (dt) {
    return $foreign.dateMethod("getUTCMilliseconds", dt);
};

// | Returns the hours for a date, according to UTC.
var getUTCHours = function (dt) {
    return $foreign.dateMethod("getUTCHours", dt);
};

// | Returns the year for a date, according to UTC.
var getUTCFullYear = function (dt) {
    return $foreign.dateMethod("getUTCFullYear", dt);
};

// | Returns the day of the week for a date, according to UTC.
var getUTCDay = function (dt) {
    return $foreign.dateMethod("getUTCDay", dt);
};

// | Returns the day of the month for a date, according to UTC.
var getUTCDate = function (dt) {
    return $foreign.dateMethod("getUTCDate", dt);
};

// | Returns the time-zone offset for a date, according to the current machine's

// | date/time locale.
var getTimezoneOffset = function (dt) {
    return $foreign.dateMethodEff("getTimezoneOffset", dt);
};

// | Returns the date as a number of milliseconds since 1970-01-01 00:00:00 UTC.
var getTime = function (dt) {
    return $foreign.dateMethod("getTime", dt);
};

// | Returns the seconds for a date, according to the current machine's

// | date/time locale.
var getSeconds = function (dt) {
    return $foreign.dateMethodEff("getSeconds", dt);
};

// | Returns the month for a date, according to the current machine's

// | date/time locale.
var getMonth = function (dt) {
    return $foreign.dateMethodEff("getMonth", dt);
};

// | Returns the minutes for a date, according to the current machine's

// | date/time locale.
var getMinutes = function (dt) {
    return $foreign.dateMethodEff("getMinutes", dt);
};

// | Returns the milliseconds for a date, according to the current machine's

// | date/time locale.
var getMilliseconds = function (dt) {
    return $foreign.dateMethodEff("getMilliseconds", dt);
};

// | Returns the hour for a date, according to the current machine's date/time

// | locale.
var getHours = function (dt) {
    return $foreign.dateMethodEff("getHours", dt);
};

// | Returns the year for a date, according to the current machine's date/time

// | locale.
var getFullYear = function (dt) {
    return $foreign.dateMethodEff("getFullYear", dt);
};

// | Returns the day of the week for a date, according to the current

// | machine's date/time locale.
var getDay = function (dt) {
    return $foreign.dateMethodEff("getDay", dt);
};

// | Returns the day of the month for a date, according to the current

// | machine's date/time locale.
var getDate = function (dt) {
    return $foreign.dateMethodEff("getDate", dt);
};

// | Converts a `DateTime` value into a native JavaScript date object. The

// | resulting date value is guaranteed to be valid.
var fromDateTime = function (v) {
    return $foreign.jsdate({
        year: Data_Int.toNumber(Data_Enum.fromEnum(Data_Date_Component.boundedEnumYear)(Data_Date.year(v.value0))), 
        month: Data_Int.toNumber(Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(Data_Date.month(v.value0)) - 1 | 0), 
        day: Data_Int.toNumber(Data_Enum.fromEnum(Data_Date_Component.boundedEnumDay)(Data_Date.day(v.value0))), 
        hour: Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumHour)(Data_Time.hour(v.value1))), 
        minute: Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumMinute)(Data_Time.minute(v.value1))), 
        second: Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumSecond)(Data_Time.second(v.value1))), 
        millisecond: Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumMillisecond)(Data_Time.millisecond(v.value1)))
    });
};
module.exports = {
    fromDateTime: fromDateTime, 
    getDate: getDate, 
    getDay: getDay, 
    getFullYear: getFullYear, 
    getHours: getHours, 
    getMilliseconds: getMilliseconds, 
    getMinutes: getMinutes, 
    getMonth: getMonth, 
    getSeconds: getSeconds, 
    getTime: getTime, 
    getTimezoneOffset: getTimezoneOffset, 
    getUTCDate: getUTCDate, 
    getUTCDay: getUTCDay, 
    getUTCFullYear: getUTCFullYear, 
    getUTCHours: getUTCHours, 
    getUTCMilliseconds: getUTCMilliseconds, 
    getUTCMinutes: getUTCMinutes, 
    getUTCMonth: getUTCMonth, 
    getUTCSeconds: getUTCSeconds, 
    toDate: toDate, 
    toDateString: toDateString, 
    toDateTime: toDateTime, 
    toISOString: toISOString, 
    toInstant: toInstant, 
    toString: toString, 
    toTimeString: toTimeString, 
    toUTCString: toUTCString, 
    isForeignJSDate: isForeignJSDate, 
    dateMethod: $foreign.dateMethod, 
    dateMethodEff: $foreign.dateMethodEff, 
    isValid: $foreign.isValid, 
    jsdate: $foreign.jsdate, 
    jsdateLocal: $foreign.jsdateLocal, 
    parse: $foreign.parse, 
    toInstantImpl: $foreign.toInstantImpl
};
