// Generated by psc version 0.10.7
"use strict";
var Control_Alt = require("../Control.Alt");
var Data_Functor = require("../Data.Functor");

// | The `Plus` type class extends the `Alt` type class with a value that

// | should be the left and right identity for `(<|>)`.

// |

// | It is similar to `Monoid`, except that it applies to types of

// | kind `* -> *`, like `Array` or `List`, rather than concrete types like

// | `String` or `Number`.

// |

// | `Plus` instances should satisfy the following laws:

// |

// | - Left identity: `empty <|> x == x`

// | - Right identity: `x <|> empty == x`

// | - Annihilation: `f <$> empty == empty`
var Plus = function (__superclass_Control$dotAlt$dotAlt_0, empty) {
    this["__superclass_Control.Alt.Alt_0"] = __superclass_Control$dotAlt$dotAlt_0;
    this.empty = empty;
};
var plusArray = new Plus(function () {
    return Control_Alt.altArray;
}, [  ]);

// | The `Plus` type class extends the `Alt` type class with a value that

// | should be the left and right identity for `(<|>)`.

// |

// | It is similar to `Monoid`, except that it applies to types of

// | kind `* -> *`, like `Array` or `List`, rather than concrete types like

// | `String` or `Number`.

// |

// | `Plus` instances should satisfy the following laws:

// |

// | - Left identity: `empty <|> x == x`

// | - Right identity: `x <|> empty == x`

// | - Annihilation: `f <$> empty == empty`
var empty = function (dict) {
    return dict.empty;
};
module.exports = {
    Plus: Plus, 
    empty: empty, 
    plusArray: plusArray
};
