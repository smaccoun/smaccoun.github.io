// Generated by psc version 0.10.7

// | This module defines a data type representing ANSI escape codes, as well as

// | functions for serialising them as Strings.
"use strict";
var Prelude = require("../Prelude");
var Data_String = require("../Data.String");
var Data_Show = require("../Data.Show");
var Data_Semiring = require("../Data.Semiring");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Functor = require("../Data.Functor");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Bold = (function () {
    function Bold() {

    };
    Bold.value = new Bold();
    return Bold;
})();
var Dim = (function () {
    function Dim() {

    };
    Dim.value = new Dim();
    return Dim;
})();
var Italic = (function () {
    function Italic() {

    };
    Italic.value = new Italic();
    return Italic;
})();
var Underline = (function () {
    function Underline() {

    };
    Underline.value = new Underline();
    return Underline;
})();
var Inverse = (function () {
    function Inverse() {

    };
    Inverse.value = new Inverse();
    return Inverse;
})();
var Strikethrough = (function () {
    function Strikethrough() {

    };
    Strikethrough.value = new Strikethrough();
    return Strikethrough;
})();

// | Specifies how much text to erase.

// |

// | * ToEnd: erase from the cursor to the end of the line or screen.

// | * FromBeginning: erase to the cursor from the beginning of the line or

// |    screen.

// | * Entire: erase the entire line or screen.
var ToEnd = (function () {
    function ToEnd() {

    };
    ToEnd.value = new ToEnd();
    return ToEnd;
})();

// | Specifies how much text to erase.

// |

// | * ToEnd: erase from the cursor to the end of the line or screen.

// | * FromBeginning: erase to the cursor from the beginning of the line or

// |    screen.

// | * Entire: erase the entire line or screen.
var FromBeginning = (function () {
    function FromBeginning() {

    };
    FromBeginning.value = new FromBeginning();
    return FromBeginning;
})();

// | Specifies how much text to erase.

// |

// | * ToEnd: erase from the cursor to the end of the line or screen.

// | * FromBeginning: erase to the cursor from the beginning of the line or

// |    screen.

// | * Entire: erase the entire line or screen.
var Entire = (function () {
    function Entire() {

    };
    Entire.value = new Entire();
    return Entire;
})();

// | The standard set of 16 ANSI colors.
var White = (function () {
    function White() {

    };
    White.value = new White();
    return White;
})();

// | The standard set of 16 ANSI colors.
var Black = (function () {
    function Black() {

    };
    Black.value = new Black();
    return Black;
})();

// | The standard set of 16 ANSI colors.
var Blue = (function () {
    function Blue() {

    };
    Blue.value = new Blue();
    return Blue;
})();

// | The standard set of 16 ANSI colors.
var Cyan = (function () {
    function Cyan() {

    };
    Cyan.value = new Cyan();
    return Cyan;
})();

// | The standard set of 16 ANSI colors.
var Green = (function () {
    function Green() {

    };
    Green.value = new Green();
    return Green;
})();

// | The standard set of 16 ANSI colors.
var Magenta = (function () {
    function Magenta() {

    };
    Magenta.value = new Magenta();
    return Magenta;
})();

// | The standard set of 16 ANSI colors.
var Red = (function () {
    function Red() {

    };
    Red.value = new Red();
    return Red;
})();

// | The standard set of 16 ANSI colors.
var Yellow = (function () {
    function Yellow() {

    };
    Yellow.value = new Yellow();
    return Yellow;
})();

// | The standard set of 16 ANSI colors.
var Grey = (function () {
    function Grey() {

    };
    Grey.value = new Grey();
    return Grey;
})();

// | The standard set of 16 ANSI colors.
var BrightBlack = (function () {
    function BrightBlack() {

    };
    BrightBlack.value = new BrightBlack();
    return BrightBlack;
})();

// | The standard set of 16 ANSI colors.
var BrightRed = (function () {
    function BrightRed() {

    };
    BrightRed.value = new BrightRed();
    return BrightRed;
})();

// | The standard set of 16 ANSI colors.
var BrightGreen = (function () {
    function BrightGreen() {

    };
    BrightGreen.value = new BrightGreen();
    return BrightGreen;
})();

// | The standard set of 16 ANSI colors.
var BrightYellow = (function () {
    function BrightYellow() {

    };
    BrightYellow.value = new BrightYellow();
    return BrightYellow;
})();

// | The standard set of 16 ANSI colors.
var BrightBlue = (function () {
    function BrightBlue() {

    };
    BrightBlue.value = new BrightBlue();
    return BrightBlue;
})();

// | The standard set of 16 ANSI colors.
var BrightMagenta = (function () {
    function BrightMagenta() {

    };
    BrightMagenta.value = new BrightMagenta();
    return BrightMagenta;
})();

// | The standard set of 16 ANSI colors.
var BrightCyan = (function () {
    function BrightCyan() {

    };
    BrightCyan.value = new BrightCyan();
    return BrightCyan;
})();

// | The standard set of 16 ANSI colors.
var BrightWhite = (function () {
    function BrightWhite() {

    };
    BrightWhite.value = new BrightWhite();
    return BrightWhite;
})();

// | A graphics parameter, controls how text appears; for example, bold,

// | underlined, foreground color, background color.
var Reset = (function () {
    function Reset() {

    };
    Reset.value = new Reset();
    return Reset;
})();

// | A graphics parameter, controls how text appears; for example, bold,

// | underlined, foreground color, background color.
var PMode = (function () {
    function PMode(value0) {
        this.value0 = value0;
    };
    PMode.create = function (value0) {
        return new PMode(value0);
    };
    return PMode;
})();

// | A graphics parameter, controls how text appears; for example, bold,

// | underlined, foreground color, background color.
var PForeground = (function () {
    function PForeground(value0) {
        this.value0 = value0;
    };
    PForeground.create = function (value0) {
        return new PForeground(value0);
    };
    return PForeground;
})();

// | A graphics parameter, controls how text appears; for example, bold,

// | underlined, foreground color, background color.
var PBackground = (function () {
    function PBackground(value0) {
        this.value0 = value0;
    };
    PBackground.create = function (value0) {
        return new PBackground(value0);
    };
    return PBackground;
})();

// | An ANSI escape code. Not all sequences are implemented. 

// | See: <https://en.wikipedia.org/wiki/ANSI_escape_code>.
var Up = (function () {
    function Up(value0) {
        this.value0 = value0;
    };
    Up.create = function (value0) {
        return new Up(value0);
    };
    return Up;
})();

// | An ANSI escape code. Not all sequences are implemented. 

// | See: <https://en.wikipedia.org/wiki/ANSI_escape_code>.
var Down = (function () {
    function Down(value0) {
        this.value0 = value0;
    };
    Down.create = function (value0) {
        return new Down(value0);
    };
    return Down;
})();

// | An ANSI escape code. Not all sequences are implemented. 

// | See: <https://en.wikipedia.org/wiki/ANSI_escape_code>.
var Forward = (function () {
    function Forward(value0) {
        this.value0 = value0;
    };
    Forward.create = function (value0) {
        return new Forward(value0);
    };
    return Forward;
})();

// | An ANSI escape code. Not all sequences are implemented. 

// | See: <https://en.wikipedia.org/wiki/ANSI_escape_code>.
var Back = (function () {
    function Back(value0) {
        this.value0 = value0;
    };
    Back.create = function (value0) {
        return new Back(value0);
    };
    return Back;
})();

// | An ANSI escape code. Not all sequences are implemented. 

// | See: <https://en.wikipedia.org/wiki/ANSI_escape_code>.
var NextLine = (function () {
    function NextLine(value0) {
        this.value0 = value0;
    };
    NextLine.create = function (value0) {
        return new NextLine(value0);
    };
    return NextLine;
})();

// | An ANSI escape code. Not all sequences are implemented. 

// | See: <https://en.wikipedia.org/wiki/ANSI_escape_code>.
var PreviousLine = (function () {
    function PreviousLine(value0) {
        this.value0 = value0;
    };
    PreviousLine.create = function (value0) {
        return new PreviousLine(value0);
    };
    return PreviousLine;
})();

// | An ANSI escape code. Not all sequences are implemented. 

// | See: <https://en.wikipedia.org/wiki/ANSI_escape_code>.
var HorizontalAbsolute = (function () {
    function HorizontalAbsolute(value0) {
        this.value0 = value0;
    };
    HorizontalAbsolute.create = function (value0) {
        return new HorizontalAbsolute(value0);
    };
    return HorizontalAbsolute;
})();

// | An ANSI escape code. Not all sequences are implemented. 

// | See: <https://en.wikipedia.org/wiki/ANSI_escape_code>.
var Position = (function () {
    function Position(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Position.create = function (value0) {
        return function (value1) {
            return new Position(value0, value1);
        };
    };
    return Position;
})();

// | An ANSI escape code. Not all sequences are implemented. 

// | See: <https://en.wikipedia.org/wiki/ANSI_escape_code>.
var EraseData = (function () {
    function EraseData(value0) {
        this.value0 = value0;
    };
    EraseData.create = function (value0) {
        return new EraseData(value0);
    };
    return EraseData;
})();

// | An ANSI escape code. Not all sequences are implemented. 

// | See: <https://en.wikipedia.org/wiki/ANSI_escape_code>.
var EraseLine = (function () {
    function EraseLine(value0) {
        this.value0 = value0;
    };
    EraseLine.create = function (value0) {
        return new EraseLine(value0);
    };
    return EraseLine;
})();

// | An ANSI escape code. Not all sequences are implemented. 

// | See: <https://en.wikipedia.org/wiki/ANSI_escape_code>.
var ScrollUp = (function () {
    function ScrollUp(value0) {
        this.value0 = value0;
    };
    ScrollUp.create = function (value0) {
        return new ScrollUp(value0);
    };
    return ScrollUp;
})();

// | An ANSI escape code. Not all sequences are implemented. 

// | See: <https://en.wikipedia.org/wiki/ANSI_escape_code>.
var ScrollDown = (function () {
    function ScrollDown(value0) {
        this.value0 = value0;
    };
    ScrollDown.create = function (value0) {
        return new ScrollDown(value0);
    };
    return ScrollDown;
})();

// | An ANSI escape code. Not all sequences are implemented. 

// | See: <https://en.wikipedia.org/wiki/ANSI_escape_code>.
var Graphics = (function () {
    function Graphics(value0) {
        this.value0 = value0;
    };
    Graphics.create = function (value0) {
        return new Graphics(value0);
    };
    return Graphics;
})();

// | An ANSI escape code. Not all sequences are implemented. 

// | See: <https://en.wikipedia.org/wiki/ANSI_escape_code>.
var SavePosition = (function () {
    function SavePosition() {

    };
    SavePosition.value = new SavePosition();
    return SavePosition;
})();

// | An ANSI escape code. Not all sequences are implemented. 

// | See: <https://en.wikipedia.org/wiki/ANSI_escape_code>.
var RestorePosition = (function () {
    function RestorePosition() {

    };
    RestorePosition.value = new RestorePosition();
    return RestorePosition;
})();

// | An ANSI escape code. Not all sequences are implemented. 

// | See: <https://en.wikipedia.org/wiki/ANSI_escape_code>.
var QueryPosition = (function () {
    function QueryPosition() {

    };
    QueryPosition.value = new QueryPosition();
    return QueryPosition;
})();

// | An ANSI escape code. Not all sequences are implemented. 

// | See: <https://en.wikipedia.org/wiki/ANSI_escape_code>.
var HideCursor = (function () {
    function HideCursor() {

    };
    HideCursor.value = new HideCursor();
    return HideCursor;
})();

// | An ANSI escape code. Not all sequences are implemented. 

// | See: <https://en.wikipedia.org/wiki/ANSI_escape_code>.
var ShowCursor = (function () {
    function ShowCursor() {

    };
    ShowCursor.value = new ShowCursor();
    return ShowCursor;
})();

// | The prefix for all escape codes.
var prefix = "\x1b[";
var eraseParamToString = function (ep) {
    if (ep instanceof ToEnd) {
        return "0";
    };
    if (ep instanceof FromBeginning) {
        return "1";
    };
    if (ep instanceof Entire) {
        return "2";
    };
    throw new Error("Failed pattern match at Ansi.Codes line 79, column 3 - line 84, column 1: " + [ ep.constructor.name ]);
};

// | The suffix for escape codes; note that this is only required for colors.
var colorSuffix = "m";
var colorCode = function (c) {
    if (c instanceof White) {
        return 37;
    };
    if (c instanceof Black) {
        return 30;
    };
    if (c instanceof Blue) {
        return 34;
    };
    if (c instanceof Cyan) {
        return 36;
    };
    if (c instanceof Green) {
        return 32;
    };
    if (c instanceof Magenta) {
        return 35;
    };
    if (c instanceof Red) {
        return 31;
    };
    if (c instanceof Yellow) {
        return 33;
    };
    if (c instanceof Grey) {
        return 90;
    };
    if (c instanceof BrightBlack) {
        return 90;
    };
    if (c instanceof BrightRed) {
        return 91;
    };
    if (c instanceof BrightGreen) {
        return 92;
    };
    if (c instanceof BrightYellow) {
        return 93;
    };
    if (c instanceof BrightBlue) {
        return 94;
    };
    if (c instanceof BrightMagenta) {
        return 95;
    };
    if (c instanceof BrightCyan) {
        return 96;
    };
    if (c instanceof BrightWhite) {
        return 97;
    };
    throw new Error("Failed pattern match at Ansi.Codes line 140, column 3 - line 157, column 20: " + [ c.constructor.name ]);
};
var codeForRenderingMode = function (m) {
    if (m instanceof Bold) {
        return 1;
    };
    if (m instanceof Dim) {
        return 2;
    };
    if (m instanceof Italic) {
        return 3;
    };
    if (m instanceof Underline) {
        return 4;
    };
    if (m instanceof Inverse) {
        return 7;
    };
    if (m instanceof Strikethrough) {
        return 9;
    };
    throw new Error("Failed pattern match at Ansi.Codes line 110, column 3 - line 118, column 1: " + [ m.constructor.name ]);
};
var graphicsParamToString = function (gp) {
    if (gp instanceof Reset) {
        return "0";
    };
    if (gp instanceof PMode) {
        return Data_Show.show(Data_Show.showInt)(codeForRenderingMode(gp.value0));
    };
    if (gp instanceof PForeground) {
        return Data_Show.show(Data_Show.showInt)(colorCode(gp.value0));
    };
    if (gp instanceof PBackground) {
        return Data_Show.show(Data_Show.showInt)(colorCode(gp.value0) + 10 | 0);
    };
    throw new Error("Failed pattern match at Ansi.Codes line 94, column 3 - line 98, column 45: " + [ gp.constructor.name ]);
};

// | Convert an escape code to the form recognised by terminals.
var escapeCodeToString = (function () {
    var go = function (c) {
        if (c instanceof Up) {
            return Data_Show.show(Data_Show.showInt)(c.value0) + "A";
        };
        if (c instanceof Down) {
            return Data_Show.show(Data_Show.showInt)(c.value0) + "B";
        };
        if (c instanceof Forward) {
            return Data_Show.show(Data_Show.showInt)(c.value0) + "C";
        };
        if (c instanceof Back) {
            return Data_Show.show(Data_Show.showInt)(c.value0) + "D";
        };
        if (c instanceof NextLine) {
            return Data_Show.show(Data_Show.showInt)(c.value0) + "E";
        };
        if (c instanceof PreviousLine) {
            return Data_Show.show(Data_Show.showInt)(c.value0) + "F";
        };
        if (c instanceof HorizontalAbsolute) {
            return Data_Show.show(Data_Show.showInt)(c.value0) + "G";
        };
        if (c instanceof Position) {
            return Data_Show.show(Data_Show.showInt)(c.value0) + (";" + (Data_Show.show(Data_Show.showInt)(c.value1) + "H"));
        };
        if (c instanceof EraseData) {
            return eraseParamToString(c.value0) + "J";
        };
        if (c instanceof EraseLine) {
            return eraseParamToString(c.value0) + "K";
        };
        if (c instanceof ScrollUp) {
            return Data_Show.show(Data_Show.showInt)(c.value0) + "S";
        };
        if (c instanceof ScrollDown) {
            return Data_Show.show(Data_Show.showInt)(c.value0) + "T";
        };
        if (c instanceof Graphics) {
            return Data_String.joinWith(";")(Data_Functor.map(Data_Functor.functorArray)(graphicsParamToString)(c.value0)) + colorSuffix;
        };
        if (c instanceof SavePosition) {
            return "s";
        };
        if (c instanceof RestorePosition) {
            return "u";
        };
        if (c instanceof QueryPosition) {
            return "6n";
        };
        if (c instanceof HideCursor) {
            return "?25l";
        };
        if (c instanceof ShowCursor) {
            return "?25h";
        };
        throw new Error("Failed pattern match at Ansi.Codes line 43, column 5 - line 63, column 3: " + [ c.constructor.name ]);
    };
    return function ($23) {
        return (function (v) {
            return prefix + v;
        })(go($23));
    };
})();
module.exports = {
    White: White, 
    Black: Black, 
    Blue: Blue, 
    Cyan: Cyan, 
    Green: Green, 
    Magenta: Magenta, 
    Red: Red, 
    Yellow: Yellow, 
    Grey: Grey, 
    BrightBlack: BrightBlack, 
    BrightRed: BrightRed, 
    BrightGreen: BrightGreen, 
    BrightYellow: BrightYellow, 
    BrightBlue: BrightBlue, 
    BrightMagenta: BrightMagenta, 
    BrightCyan: BrightCyan, 
    BrightWhite: BrightWhite, 
    ToEnd: ToEnd, 
    FromBeginning: FromBeginning, 
    Entire: Entire, 
    Up: Up, 
    Down: Down, 
    Forward: Forward, 
    Back: Back, 
    NextLine: NextLine, 
    PreviousLine: PreviousLine, 
    HorizontalAbsolute: HorizontalAbsolute, 
    Position: Position, 
    EraseData: EraseData, 
    EraseLine: EraseLine, 
    ScrollUp: ScrollUp, 
    ScrollDown: ScrollDown, 
    Graphics: Graphics, 
    SavePosition: SavePosition, 
    RestorePosition: RestorePosition, 
    QueryPosition: QueryPosition, 
    HideCursor: HideCursor, 
    ShowCursor: ShowCursor, 
    Reset: Reset, 
    PMode: PMode, 
    PForeground: PForeground, 
    PBackground: PBackground, 
    Bold: Bold, 
    Dim: Dim, 
    Italic: Italic, 
    Underline: Underline, 
    Inverse: Inverse, 
    Strikethrough: Strikethrough, 
    codeForRenderingMode: codeForRenderingMode, 
    colorCode: colorCode, 
    colorSuffix: colorSuffix, 
    eraseParamToString: eraseParamToString, 
    escapeCodeToString: escapeCodeToString, 
    graphicsParamToString: graphicsParamToString, 
    prefix: prefix
};
