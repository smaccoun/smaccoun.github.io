// Generated by psc version 0.10.7
"use strict";
var $foreign = require("./foreign");
var Data_Ord = require("../Data.Ord");
var Data_Unit = require("../Data.Unit");
var Data_Ordering = require("../Data.Ordering");

// | The `Bounded` type class represents totally ordered types that have an

// | upper and lower boundary.

// |

// | Instances should satisfy the following law in addition to the `Ord` laws:

// |

// | - Bounded: `bottom <= a <= top`
var Bounded = function (__superclass_Data$dotOrd$dotOrd_0, bottom, top) {
    this["__superclass_Data.Ord.Ord_0"] = __superclass_Data$dotOrd$dotOrd_0;
    this.bottom = bottom;
    this.top = top;
};

// | The `Bounded` type class represents totally ordered types that have an

// | upper and lower boundary.

// |

// | Instances should satisfy the following law in addition to the `Ord` laws:

// |

// | - Bounded: `bottom <= a <= top`
var top = function (dict) {
    return dict.top;
};
var boundedUnit = new Bounded(function () {
    return Data_Ord.ordUnit;
}, Data_Unit.unit, Data_Unit.unit);
var boundedOrdering = new Bounded(function () {
    return Data_Ord.ordOrdering;
}, Data_Ordering.LT.value, Data_Ordering.GT.value);
var boundedInt = new Bounded(function () {
    return Data_Ord.ordInt;
}, $foreign.bottomInt, $foreign.topInt);

// | Characters fall within the Unicode range.
var boundedChar = new Bounded(function () {
    return Data_Ord.ordChar;
}, $foreign.bottomChar, $foreign.topChar);
var boundedBoolean = new Bounded(function () {
    return Data_Ord.ordBoolean;
}, false, true);

// | The `Bounded` type class represents totally ordered types that have an

// | upper and lower boundary.

// |

// | Instances should satisfy the following law in addition to the `Ord` laws:

// |

// | - Bounded: `bottom <= a <= top`
var bottom = function (dict) {
    return dict.bottom;
};
module.exports = {
    Bounded: Bounded, 
    bottom: bottom, 
    top: top, 
    boundedBoolean: boundedBoolean, 
    boundedInt: boundedInt, 
    boundedChar: boundedChar, 
    boundedOrdering: boundedOrdering, 
    boundedUnit: boundedUnit
};
